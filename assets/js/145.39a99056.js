(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{462:function(e,n,s){"use strict";s.r(n);var t=s(3),o=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"建议有时间或者校招要做笔试的同学看下-社招基本只需要看看事件循环的题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#建议有时间或者校招要做笔试的同学看下-社招基本只需要看看事件循环的题目"}},[e._v("#")]),e._v(" 建议有时间或者校招要做笔试的同学看下 社招基本只需要看看事件循环的题目")]),e._v(" "),n("h3",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言：")]),e._v(" "),n("p",[n("strong",[e._v("代码输出结果")]),e._v("也是面试中常考的题目，一段代码中可能涉及到很多的知识点，这就考察到了应聘者的基础能力。在前端面试中，常考的代码输出问题主要涉及到以下知识点："),n("strong",[e._v("异步编程、事件循环、this指向、作用域、变量提升、闭包、原型、继承")]),e._v("等，这些知识点往往不是单独出现的，而是在同一段代码中包含多个知识点。所以，笔者将这些问题大致分为四类进行讨论。这里不会系统的阐述基础知识，而是通过面试例题的形式，来讲述每个题目的知识点以及代码的执行过程。如果会了这些例题，在前端面试中多数代码输出问题就可以轻而易举的解决了。")]),e._v(" "),n("p",[e._v("**注：**本文中所有例题收集自牛客网面经、网络博文等，如果侵权，请联系删除！")]),e._v(" "),n("h2",{attrs:{id:"一、异步-事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、异步-事件循环"}},[e._v("#")]),e._v(" 一、异步&事件循环")]),e._v(" "),n("h3",{attrs:{id:"_1-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码输出结果"}},[e._v("#")]),e._v(" 1. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = new Promise((resolve, reject) => {\n  console.log(1);\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 \n2 \n4\n")])])]),n("p",[e._v("promise.then 是微任务，它会在所有的宏任务执行完之后才会执行，同时需要promise内部的状态发生变化，因为这里内部没有发生变化，一直处于pending状态，所以不输出3。")]),e._v(" "),n("h3",{attrs:{id:"_2-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码输出结果"}},[e._v("#")]),e._v(" 2. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n  resolve('resolve1')\n})\nconst promise2 = promise1.then(res => {\n  console.log(res)\n})\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("promise1\n1 Promise{<resolved>: resolve1}\n2 Promise{<pending>}\nresolve1\n")])])]),n("p",[e._v("需要注意的是，直接打印promise1，会打印出它的状态值和参数。")]),e._v(" "),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("script是一个宏任务，按照顺序执行这些代码；")]),e._v(" "),n("li",[e._v("首先进入Promise，执行该构造函数中的代码，打印"),n("code",[e._v("promise1")]),e._v("；")]),e._v(" "),n("li",[e._v("碰到"),n("code",[e._v("resolve")]),e._v("函数, 将"),n("code",[e._v("promise1")]),e._v("的状态改变为"),n("code",[e._v("resolved")]),e._v(", 并将结果保存下来；")]),e._v(" "),n("li",[e._v("碰到"),n("code",[e._v("promise1.then")]),e._v("这个微任务，将它放入微任务队列；")]),e._v(" "),n("li",[n("code",[e._v("promise2")]),e._v("是一个新的状态为"),n("code",[e._v("pending")]),e._v("的"),n("code",[e._v("Promise")]),e._v("；")]),e._v(" "),n("li",[e._v("执行同步代码1， 同时打印出"),n("code",[e._v("promise1")]),e._v("的状态是"),n("code",[e._v("resolved")]),e._v("；")]),e._v(" "),n("li",[e._v("执行同步代码2，同时打印出"),n("code",[e._v("promise2")]),e._v("的状态是"),n("code",[e._v("pending")]),e._v("；")]),e._v(" "),n("li",[e._v("宏任务执行完毕，查找微任务队列，发现"),n("code",[e._v("promise1.then")]),e._v("这个微任务且状态为"),n("code",[e._v("resolved")]),e._v("，执行它。")])]),e._v(" "),n("h3",{attrs:{id:"_3-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码输出结果"}},[e._v("#")]),e._v(" 3. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const promise = new Promise((resolve, reject) => {\n  console.log(1);\n  setTimeout(() => {\n    console.log("timerStart");\n    resolve("success");\n    console.log("timerEnd");\n  }, 0);\n  console.log(2);\n});\npromise.then((res) => {\n  console.log(res);\n});\nconsole.log(4);\n')])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n2\n4\ntimerStart\ntimerEnd\nsuccess\n")])])]),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ul",[n("li",[e._v("首先遇到Promise构造函数，会先执行里面的内容，打印"),n("code",[e._v("1")]),e._v("；")]),e._v(" "),n("li",[e._v("遇到定时器"),n("code",[e._v("steTimeout")]),e._v("，它是一个宏任务，放入宏任务队列；")]),e._v(" "),n("li",[e._v("继续向下执行，打印出2；")]),e._v(" "),n("li",[e._v("由于"),n("code",[e._v("Promise")]),e._v("的状态此时还是"),n("code",[e._v("pending")]),e._v("，所以"),n("code",[e._v("promise.then")]),e._v("先不执行；")]),e._v(" "),n("li",[e._v("继续执行下面的同步任务，打印出4；")]),e._v(" "),n("li",[e._v("此时微任务队列没有任务，继续执行下一轮宏任务，执行"),n("code",[e._v("steTimeout")]),e._v("；")]),e._v(" "),n("li",[e._v("首先执行"),n("code",[e._v("timerStart")]),e._v("，然后遇到了"),n("code",[e._v("resolve")]),e._v("，将"),n("code",[e._v("promise")]),e._v("的状态改为"),n("code",[e._v("resolved")]),e._v("且保存结果并将之前的"),n("code",[e._v("promise.then")]),e._v("推入微任务队列，再执行"),n("code",[e._v("timerEnd")]),e._v("；")]),e._v(" "),n("li",[e._v("执行完这个宏任务，就去执行微任务"),n("code",[e._v("promise.then")]),e._v("，打印出"),n("code",[e._v("resolve")]),e._v("的结果。")])]),e._v(" "),n("h3",{attrs:{id:"_4-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码输出结果"}},[e._v("#")]),e._v(" 4. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n});\nconst timer1 = setTimeout(() => {\n  console.log('timer1')\n  Promise.resolve().then(() => {\n    console.log('promise2')\n  })\n}, 0)\nconsole.log('start');\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("start\npromise1\ntimer1\npromise2\ntimer2\n")])])]),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先，"),n("code",[e._v("Promise.resolve().then")]),e._v("是一个微任务，加入微任务队列")]),e._v(" "),n("li",[e._v("执行timer1，它是一个宏任务，加入宏任务队列")]),e._v(" "),n("li",[e._v("继续执行下面的同步代码，打印出"),n("code",[e._v("start")])]),e._v(" "),n("li",[e._v("这样第一轮宏任务就执行完了，开始执行微任务"),n("code",[e._v("Promise.resolve().then")]),e._v("，打印出"),n("code",[e._v("promise1")])]),e._v(" "),n("li",[e._v("遇到"),n("code",[e._v("timer2")]),e._v("，它是一个宏任务，将其加入宏任务队列，此时宏任务队列有两个任务，分别是"),n("code",[e._v("timer1")]),e._v("、"),n("code",[e._v("timer2")]),e._v("；")]),e._v(" "),n("li",[e._v("这样第一轮微任务就执行完了，开始执行第二轮宏任务，首先执行定时器"),n("code",[e._v("timer1")]),e._v("，打印"),n("code",[e._v("timer1")]),e._v("；")]),e._v(" "),n("li",[e._v("遇到"),n("code",[e._v("Promise.resolve().then")]),e._v("，它是一个微任务，加入微任务队列")]),e._v(" "),n("li",[e._v("开始执行微任务队列中的任务，打印"),n("code",[e._v("promise2")]),e._v("；")]),e._v(" "),n("li",[e._v("最后执行宏任务"),n("code",[e._v("timer2")]),e._v("定时器，打印出"),n("code",[e._v("timer2")]),e._v("；")])]),e._v(" "),n("h3",{attrs:{id:"_5-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-代码输出结果"}},[e._v("#")]),e._v(" 5. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = new Promise((resolve, reject) => {\n    resolve('success1');\n    reject('error');\n    resolve('success2');\n});\npromise.then((res) => {\n    console.log('then:', res);\n}).catch((err) => {\n    console.log('catch:', err);\n})\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("then：success1\n")])])]),n("p",[e._v("这个题目考察的就是"),n("strong",[e._v("Promise的状态在发生变化之后，就不会再发生变化")]),e._v("。开始状态由"),n("code",[e._v("pending")]),e._v("变为"),n("code",[e._v("resolve")]),e._v("，说明已经变为已完成状态，下面的两个状态的就不会再执行，同时下面的catch也不会捕获到错误。")]),e._v(" "),n("h3",{attrs:{id:"_6-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-代码输出结果"}},[e._v("#")]),e._v(" 6. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\nPromise {<fulfilled>: undefined}\n")])])]),n("p",[e._v("Promise.resolve方法的参数如果是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为resolved，Promise.resolve方法的参数，会同时传给回调函数。")]),e._v(" "),n("p",[e._v("then方法接受的参数是函数，而如果传递的并非是一个函数，它实际上会将其解释为then(null)，这就会导致前一个Promise的结果会传递下面。")]),e._v(" "),n("h3",{attrs:{id:"_7-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-代码输出结果"}},[e._v("#")]),e._v(" 7. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  }, 1000)\n})\nconst promise2 = promise1.then(() => {\n  throw new Error('error!!!')\n})\nconsole.log('promise1', promise1)\nconsole.log('promise2', promise2)\nsetTimeout(() => {\n  console.log('promise1', promise1)\n  console.log('promise2', promise2)\n}, 2000)\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('promise1 Promise {<pending>}\npromise2 Promise {<pending>}\n\nUncaught (in promise) Error: error!!!\npromise1 Promise {<fulfilled>: "success"}\npromise2 Promise {<rejected>: Error: error!!}\n')])])]),n("h3",{attrs:{id:"_8-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-代码输出结果"}},[e._v("#")]),e._v(" 8. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    return 3;\n  })\n  .then(res => {\n    console.log(res);\n  });\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1   \n2\n")])])]),n("p",[e._v("Promise是可以链式调用的，由于每次调用 "),n("code",[e._v(".then")]),e._v(" 或者 "),n("code",[e._v(".catch")]),e._v(" 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般任务的链式调用一样return this。")]),e._v(" "),n("p",[e._v("上面的输出结果之所以依次打印出1和2，是因为"),n("code",[e._v("resolve(1)")]),e._v("之后走的是第一个then方法，并没有进catch里，所以第二个then中的res得到的实际上是第一个then的返回值。并且return 2会被包装成"),n("code",[e._v("resolve(2)")]),e._v("，被最后的then打印输出2。")]),e._v(" "),n("h3",{attrs:{id:"_9-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-代码输出结果"}},[e._v("#")]),e._v(" 9. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Promise.resolve().then(() => {\n  return new Error(\'error!!!\')\n}).then(res => {\n  console.log("then: ", res)\n}).catch(err => {\n  console.log("catch: ", err)\n})\n')])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"then: " "Error: error!!!"\n')])])]),n("p",[e._v("返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的"),n("code",[e._v("return new Error('error!!!')")]),e._v("也被包裹成了"),n("code",[e._v("return Promise.resolve(new Error('error!!!'))")]),e._v("，因此它会被then捕获而不是catch。")]),e._v(" "),n("h3",{attrs:{id:"_10-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-代码输出结果"}},[e._v("#")]),e._v(" 10. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const promise = Promise.resolve().then(() => {\n  return promise;\n})\npromise.catch(console.err)\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Uncaught (in promise) TypeError: Chaining cycle detected for promise #<Promise>\n")])])]),n("p",[e._v("这里其实是一个坑，"),n("code",[e._v(".then")]),e._v(" 或 "),n("code",[e._v(".catch")]),e._v(" 返回的值不能是 promise 本身，否则会造成死循环。")]),e._v(" "),n("h3",{attrs:{id:"_11-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-代码输出结果"}},[e._v("#")]),e._v(" 11. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n")])])]),n("p",[e._v("看到这个题目，好多的then，实际上只需要记住一个原则："),n("code",[e._v(".then")]),e._v(" 或"),n("code",[e._v(".catch")]),e._v(" 的参数期望是函数，传入非函数则会发生"),n("strong",[e._v("值透传")]),e._v("。")]),e._v(" "),n("p",[e._v("第一个then和第二个then中传入的都不是函数，一个是数字，一个是对象，因此发生了透传，将"),n("code",[e._v("resolve(1)")]),e._v(" 的值直接传到最后一个then里，直接打印出1。")]),e._v(" "),n("h3",{attrs:{id:"_12-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-代码输出结果"}},[e._v("#")]),e._v(" 12. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.reject('err!!!')\n  .then((res) => {\n    console.log('success', res)\n  }, (err) => {\n    console.log('error', err)\n  }).catch(err => {\n    console.log('catch', err)\n  })\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("error err!!!\n")])])]),n("p",[e._v("我们知道，"),n("code",[e._v(".then")]),e._v("函数中的两个参数：")]),e._v(" "),n("ul",[n("li",[e._v("第一个参数是用来处理Promise成功的函数")]),e._v(" "),n("li",[e._v("第二个则是处理失败的函数")])]),e._v(" "),n("p",[e._v("也就是说"),n("code",[e._v("Promise.resolve('1')")]),e._v("的值会进入成功的函数，"),n("code",[e._v("Promise.reject('2')")]),e._v("的值会进入失败的函数。")]),e._v(" "),n("p",[e._v("在这道题中，错误直接被"),n("code",[e._v("then")]),e._v("的第二个参数捕获了，所以就不会被"),n("code",[e._v("catch")]),e._v("捕获了，输出结果为："),n("code",[e._v("error err!!!'")])]),e._v(" "),n("p",[e._v("但是，如果是像下面这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve()\n  .then(function success (res) {\n    throw new Error('error!!!')\n  }, function fail1 (err) {\n    console.log('fail1', err)\n  }).catch(function fail2 (err) {\n    console.log('fail2', err)\n  })\n")])])]),n("p",[e._v("在"),n("code",[e._v("then")]),e._v("的第一参数中抛出了错误，那么他就不会被第二个参数不活了，而是被后面的"),n("code",[e._v("catch")]),e._v("捕获到。")]),e._v(" "),n("h3",{attrs:{id:"_13-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-代码输出结果"}},[e._v("#")]),e._v(" 13. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve('1')\n  .then(res => {\n    console.log(res)\n  })\n  .finally(() => {\n    console.log('finally')\n  })\nPromise.resolve('2')\n  .finally(() => {\n    console.log('finally2')\n    return '我是finally2返回的值'\n  })\n  .then(res => {\n    console.log('finally2后面的then函数', res)\n  })\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\nfinally2\nfinally\nfinally2后面的then函数 2\n")])])]),n("p",[n("code",[e._v(".finally()")]),e._v("一般用的很少，只要记住以下几点就可以了：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v(".finally()")]),e._v("方法不管Promise对象最后的状态如何都会执行")]),e._v(" "),n("li",[n("code",[e._v(".finally()")]),e._v("方法的回调函数不接受任何的参数，也就是说你在"),n("code",[e._v(".finally()")]),e._v("函数中是无法知道Promise最终的状态是"),n("code",[e._v("resolved")]),e._v("还是"),n("code",[e._v("rejected")]),e._v("的")]),e._v(" "),n("li",[e._v("它最终返回的默认会是一个上一次的Promise对象值，不过如果抛出的是一个异常则返回异常的Promise对象。")]),e._v(" "),n("li",[e._v("finally本质上是then方法的特例")])]),e._v(" "),n("p",[n("code",[e._v(".finally()")]),e._v("的错误捕获：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve('1')\n  .finally(() => {\n    console.log('finally1')\n    throw new Error('我是finally中抛出的异常')\n  })\n  .then(res => {\n    console.log('finally后面的then函数', res)\n  })\n  .catch(err => {\n    console.log('捕获错误', err)\n  })\n")])])]),n("p",[e._v("输出结果为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("'finally1'\n'捕获错误' Error: 我是finally中抛出的异常\n")])])]),n("h3",{attrs:{id:"_14-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-代码输出结果"}},[e._v("#")]),e._v(" 14. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function runAsync (x) {\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n    return p\n}\n\nPromise.all([runAsync(1), runAsync(2), runAsync(3)]).then(res => console.log(res))\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n2\n3\n[1, 2, 3]\n")])])]),n("p",[e._v("首先，定义了一个Promise，来异步执行函数runAsync，该函数传入一个值x，然后间隔一秒后打印出这个x。")]),e._v(" "),n("p",[e._v("之后再使用"),n("code",[e._v("Promise.all")]),e._v("来执行这个函数，执行的时候，看到一秒之后输出了1，2，3，同时输出了数组[1, 2, 3]，三个函数是同步执行的，并且在一个回调函数中返回了所有的结果。并且结果和函数的执行顺序是一致的。")]),e._v(" "),n("h3",{attrs:{id:"_15-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-代码输出结果"}},[e._v("#")]),e._v(" 15. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nfunction runReject (x) {\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n  return p\n}\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n       .then(res => console.log(res))\n       .catch(err => console.log(err))\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 1s后输出\n1\n3\n// 2s后输出\n2\nError: 2\n// 4s后输出\n4\n")])])]),n("p",[e._v("可以看到。catch捕获到了第一个错误，在这道题目中最先的错误就是"),n("code",[e._v("runReject(2)")]),e._v("的结果。如果一组异步操作中有一个异常都不会进入"),n("code",[e._v(".then()")]),e._v("的第一个回调函数参数中。会被"),n("code",[e._v(".then()")]),e._v("的第二个回调函数捕获。")]),e._v(" "),n("h3",{attrs:{id:"_16-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-代码输出结果"}},[e._v("#")]),e._v(" 16. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nPromise.race([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log('result: ', res))\n  .catch(err => console.log(err))\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n'result: ' 1\n2\n3\n")])])]),n("p",[e._v("then只会捕获第一个成功的方法，其他的函数虽然还会继续执行，但是不是被then捕获了。")]),e._v(" "),n("h3",{attrs:{id:"_17-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-代码输出结果"}},[e._v("#")]),e._v(" 17. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function runAsync(x) {\n  const p = new Promise(r =>\n    setTimeout(() => r(x, console.log(x)), 1000)\n  );\n  return p;\n}\nfunction runReject(x) {\n  const p = new Promise((res, rej) =>\n    setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x)\n  );\n  return p;\n}\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log("result: ", res))\n  .catch(err => console.log(err));\n')])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("0\nError: 0\n1\n2\n3\n")])])]),n("p",[e._v("可以看到在catch捕获到第一个错误之后，后面的代码还不执行，不过不会再被捕获了。")]),e._v(" "),n("p",[e._v("注意："),n("code",[e._v("all")]),e._v("和"),n("code",[e._v("race")]),e._v("传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被then的第二个参数或者后面的catch捕获；但并不会影响数组中其它的异步任务的执行。")]),e._v(" "),n("h3",{attrs:{id:"_18-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-代码输出结果"}},[e._v("#")]),e._v(" 18. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('async function async1() {\n  console.log("async1 start");\n  await async2();\n  console.log("async1 end");\n}\nasync function async2() {\n  console.log("async2");\n}\nasync1();\nconsole.log(\'start\')\n')])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async1 start\nasync2\nstart\nasync1 end\n")])])]),n("p",[e._v("代码的执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先执行函数中的同步代码"),n("code",[e._v("async1 start")]),e._v("，之后遇到了"),n("code",[e._v("await")]),e._v("，它会阻塞"),n("code",[e._v("async1")]),e._v("后面代码的执行，因此会先去执行"),n("code",[e._v("async2")]),e._v("中的同步代码"),n("code",[e._v("async2")]),e._v("，然后跳出"),n("code",[e._v("async1")]),e._v("；")]),e._v(" "),n("li",[e._v("跳出"),n("code",[e._v("async1")]),e._v("函数后，执行同步代码"),n("code",[e._v("start")]),e._v("；")]),e._v(" "),n("li",[e._v("在一轮宏任务全部执行完之后，再来执行"),n("code",[e._v("await")]),e._v("后面的内容"),n("code",[e._v("async1 end")]),e._v("。")])]),e._v(" "),n("p",[e._v("这里可以理解为await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中。")]),e._v(" "),n("h3",{attrs:{id:"_19-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-代码输出结果"}},[e._v("#")]),e._v(" 19. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('async function async1() {\n  console.log("async1 start");\n  await async2();\n  console.log("async1 end");\n  setTimeout(() => {\n    console.log(\'timer1\')\n  }, 0)\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log(\'timer2\')\n  }, 0)\n  console.log("async2");\n}\nasync1();\nsetTimeout(() => {\n  console.log(\'timer3\')\n}, 0)\nconsole.log("start")\n')])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async1 start\nasync2\nstart\nasync1 end\ntimer2\ntimer3\ntimer1\n")])])]),n("p",[e._v("代码的执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先进入"),n("code",[e._v("async1")]),e._v("，打印出"),n("code",[e._v("async1 start")]),e._v("；")]),e._v(" "),n("li",[e._v("之后遇到"),n("code",[e._v("async2")]),e._v("，进入"),n("code",[e._v("async2")]),e._v("，遇到定时器"),n("code",[e._v("timer2")]),e._v("，加入宏任务队列，之后打印"),n("code",[e._v("async2")]),e._v("；")]),e._v(" "),n("li",[e._v("由于"),n("code",[e._v("async2")]),e._v("阻塞了后面代码的执行，所以执行后面的定时器"),n("code",[e._v("timer3")]),e._v("，将其加入宏任务队列，之后打印"),n("code",[e._v("start")]),e._v("；")]),e._v(" "),n("li",[e._v("然后执行async2后面的代码，打印出"),n("code",[e._v("async1 end")]),e._v("，遇到定时器timer1，将其加入宏任务队列；")]),e._v(" "),n("li",[e._v("最后，宏任务队列有三个任务，先后顺序为"),n("code",[e._v("timer2")]),e._v("，"),n("code",[e._v("timer3")]),e._v("，"),n("code",[e._v("timer1")]),e._v("，没有微任务，所以直接所有的宏任务按照先进先出的原则执行。")])]),e._v(" "),n("h3",{attrs:{id:"_20-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-代码输出结果"}},[e._v("#")]),e._v(" 20. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("script start\nasync1 start\npromise1\nscript end\n")])])]),n("p",[e._v("这里需要注意的是在"),n("code",[e._v("async1")]),e._v("中"),n("code",[e._v("await")]),e._v("后面的Promise是没有返回值的，也就是它的状态始终是"),n("code",[e._v("pending")]),e._v("状态，所以在"),n("code",[e._v("await")]),e._v("之后的内容是不会执行的，包括"),n("code",[e._v("async1")]),e._v("后面的 "),n("code",[e._v(".then")]),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"_21-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-代码输出结果"}},[e._v("#")]),e._v(" 21. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise1 resolve')\n  }).then(res => console.log(res))\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n")])])]),n("p",[e._v("这里是对上面一题进行了改造，加上了resolve。")]),e._v(" "),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("script start\nasync1 start\npromise1\nscript end\npromise1 resolve\nasync1 success\nasync1 end\n")])])]),n("h3",{attrs:{id:"_22-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-代码输出结果"}},[e._v("#")]),e._v(" 22. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('async function async1() {\n  console.log("async1 start");\n  await async2();\n  console.log("async1 end");\n}\n\nasync function async2() {\n  console.log("async2");\n}\n\nconsole.log("script start");\n\nsetTimeout(function() {\n  console.log("setTimeout");\n}, 0);\n\nasync1();\n\nnew Promise(resolve => {\n  console.log("promise1");\n  resolve();\n}).then(function() {\n  console.log("promise2");\n});\nconsole.log(\'script end\')\n')])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("script start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n")])])]),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("开头定义了async1和async2两个函数，但是并未执行，执行script中的代码，所以打印出script start；")]),e._v(" "),n("li",[e._v("遇到定时器Settimeout，它是一个宏任务，将其加入到宏任务队列；")]),e._v(" "),n("li",[e._v("之后执行函数async1，首先打印出async1 start；")]),e._v(" "),n("li",[e._v("遇到await，执行async2，打印出async2，并阻断后面代码的执行，将后面的代码加入到微任务队列；")]),e._v(" "),n("li",[e._v("然后跳出async1和async2，遇到Promise，打印出promise1；")]),e._v(" "),n("li",[e._v("遇到resolve，将其加入到微任务队列，然后执行后面的script代码，打印出script end；")]),e._v(" "),n("li",[e._v("之后就该执行微任务队列了，首先打印出async1 end，然后打印出promise2；")]),e._v(" "),n("li",[e._v("执行完微任务队列，就开始执行宏任务队列中的定时器，打印出setTimeout。")])]),e._v(" "),n("h3",{attrs:{id:"_23-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23-代码输出结果"}},[e._v("#")]),e._v(" 23. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async function async1 () {\n  await async2();\n  console.log('async1');\n  return 'async1 success'\n}\nasync function async2 () {\n  return new Promise((resolve, reject) => {\n    console.log('async2')\n    reject('error')\n  })\n}\nasync1().then(res => console.log(res))\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async2\nUncaught (in promise) error\n")])])]),n("p",[e._v("可以看到，如果async函数中抛出了错误，就会终止错误结果，不会继续向下执行。")]),e._v(" "),n("p",[e._v("如果想要让错误不足之处后面的代码执行，可以使用catch来捕获：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async function async1 () {\n  await Promise.reject('error!!!').catch(e => console.log(e))\n  console.log('async1');\n  return Promise.resolve('async1 success')\n}\nasync1().then(res => console.log(res))\nconsole.log('script start')\n")])])]),n("p",[e._v("这样的输出结果就是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("script start\nerror!!!\nasync1\nasync1 success\n")])])]),n("h3",{attrs:{id:"_24-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24-代码输出结果"}},[e._v("#")]),e._v(" 24. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const first = () => (new Promise((resolve, reject) => {\n    console.log(3);\n    let p = new Promise((resolve, reject) => {\n        console.log(7);\n        setTimeout(() => {\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        }, 0)\n        resolve(1);\n    });\n    resolve(2);\n    p.then((arg) => {\n        console.log(arg);\n    });\n}));\nfirst().then((arg) => {\n    console.log(arg);\n});\nconsole.log(4);\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("3\n7\n4\n1\n2\n5\nPromise{<resolved>: 1}\n")])])]),n("p",[e._v("代码的执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先会进入Promise，打印出3，之后进入下面的Promise，打印出7；")]),e._v(" "),n("li",[e._v("遇到了定时器，将其加入宏任务队列；")]),e._v(" "),n("li",[e._v("执行Promise  p中的resolve，状态变为resolved，返回值为1；")]),e._v(" "),n("li",[e._v("执行Promise first中的resolve，状态变为resolved，返回值为2；")]),e._v(" "),n("li",[e._v("遇到p.then，将其加入微任务队列，遇到first().then，将其加入任务队列；")]),e._v(" "),n("li",[e._v("执行外面的代码，打印出4；")]),e._v(" "),n("li",[e._v("这样第一轮宏任务就执行完了，开始执行微任务队列中的任务，先后打印出1和2；")]),e._v(" "),n("li",[e._v("这样微任务就执行完了，开始执行下一轮宏任务，宏任务队列中有一个定时器，执行它，打印出5，由于执行已经变为resolved状态，所以"),n("code",[e._v("resolve(6)")]),e._v("不会再执行；")]),e._v(" "),n("li",[e._v("最后"),n("code",[e._v("console.log(p)")]),e._v("打印出"),n("code",[e._v("Promise{<resolved>: 1}")]),e._v("；")])]),e._v(" "),n("h3",{attrs:{id:"_25-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25-代码输出结果"}},[e._v("#")]),e._v(" 25. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const async1 = async () => {\n  console.log('async1');\n  setTimeout(() => {\n    console.log('timer1')\n  }, 2000)\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 end')\n  return 'async1 success'\n} \nconsole.log('script start');\nasync1().then(res => console.log(res));\nconsole.log('script end');\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .catch(4)\n  .then(res => console.log(res))\nsetTimeout(() => {\n  console.log('timer2')\n}, 1000)\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("script start\nasync1\npromise1\nscript end\n1\ntimer2\ntimer1\n")])])]),n("p",[e._v("代码的执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先执行同步带吗，打印出script start；")]),e._v(" "),n("li",[e._v("遇到定时器timer1将其加入宏任务队列；")]),e._v(" "),n("li",[e._v("之后是执行Promise，打印出promise1，由于Promise没有返回值，所以后面的代码不会执行；")]),e._v(" "),n("li",[e._v("然后执行同步代码，打印出script end；")]),e._v(" "),n("li",[e._v("继续执行下面的Promise，.then和.catch期望参数是一个函数，这里传入的是一个数字，因此就会发生值渗透，将resolve(1)的值传到最后一个then，直接打印出1；")]),e._v(" "),n("li",[e._v("遇到第二个定时器，将其加入到微任务队列，执行微任务队列，按顺序依次执行两个定时器，但是由于定时器时间的原因，会在两秒后先打印出timer2，在四秒后打印出timer1。")])]),e._v(" "),n("h3",{attrs:{id:"_26-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26-代码输出结果"}},[e._v("#")]),e._v(" 26. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const p1 = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve('resolve3');\n    console.log('timer1')\n  }, 0)\n  resolve('resovle1');\n  resolve('resolve2');\n}).then(res => {\n  console.log(res)  // resolve1\n  setTimeout(() => {\n    console.log(p1)\n  }, 1000)\n}).finally(res => {\n  console.log('finally', res)\n})\n")])])]),n("p",[e._v("执行结果为如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("resolve1\nfinally  undefined\ntimer1\nPromise{<resolved>: undefined}\n")])])]),n("h3",{attrs:{id:"_27-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27-代码输出结果"}},[e._v("#")]),e._v(" 27. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n7\n6\n8\n2\n4\n3\n5\n9\n11\n10\n12\n")])])]),n("p",[n("strong",[e._v("（1）第一轮事件循环流程分析如下：")])]),e._v(" "),n("ul",[n("li",[e._v("整体script作为第一个宏任务进入主线程，遇到"),n("code",[e._v("console.log")]),e._v("，输出1。")]),e._v(" "),n("li",[e._v("遇到"),n("code",[e._v("setTimeout")]),e._v("，其回调函数被分发到宏任务Event Queue中。暂且记为"),n("code",[e._v("setTimeout1")]),e._v("。")]),e._v(" "),n("li",[e._v("遇到"),n("code",[e._v("process.nextTick()")]),e._v("，其回调函数被分发到微任务Event Queue中。记为"),n("code",[e._v("process1")]),e._v("。")]),e._v(" "),n("li",[e._v("遇到"),n("code",[e._v("Promise")]),e._v("，"),n("code",[e._v("new Promise")]),e._v("直接执行，输出7。"),n("code",[e._v("then")]),e._v("被分发到微任务Event Queue中。记为"),n("code",[e._v("then1")]),e._v("。")]),e._v(" "),n("li",[e._v("又遇到了"),n("code",[e._v("setTimeout")]),e._v("，其回调函数被分发到宏任务Event Queue中，记为"),n("code",[e._v("setTimeout2")]),e._v("。")])]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("宏任务Event Queue")]),e._v(" "),n("th",[e._v("微任务Event Queue")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("setTimeout1")]),e._v(" "),n("td",[e._v("process1")])]),e._v(" "),n("tr",[n("td",[e._v("setTimeout2")]),e._v(" "),n("td",[e._v("then1")])])])]),e._v(" "),n("p",[e._v("上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。发现了"),n("code",[e._v("process1")]),e._v("和"),n("code",[e._v("then1")]),e._v("两个微任务：")]),e._v(" "),n("ul",[n("li",[e._v("执行"),n("code",[e._v("process1")]),e._v("，输出6。")]),e._v(" "),n("li",[e._v("执行"),n("code",[e._v("then1")]),e._v("，输出8。")])]),e._v(" "),n("p",[e._v("第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。")]),e._v(" "),n("p",[n("strong",[e._v("（2）第二轮时间循环从")]),n("code",[e._v("**setTimeout1**")]),n("strong",[e._v("宏任务开始：")])]),e._v(" "),n("ul",[n("li",[e._v("首先输出2。接下来遇到了"),n("code",[e._v("process.nextTick()")]),e._v("，同样将其分发到微任务Event Queue中，记为"),n("code",[e._v("process2")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("new Promise")]),e._v("立即执行输出4，"),n("code",[e._v("then")]),e._v("也分发到微任务Event Queue中，记为"),n("code",[e._v("then2")]),e._v("。")])]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("宏任务Event Queue")]),e._v(" "),n("th",[e._v("微任务Event Queue")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("setTimeout2")]),e._v(" "),n("td",[e._v("process2")])]),e._v(" "),n("tr",[n("td"),e._v(" "),n("td",[e._v("then2")])])])]),e._v(" "),n("p",[e._v("第二轮事件循环宏任务结束，发现有"),n("code",[e._v("process2")]),e._v("和"),n("code",[e._v("then2")]),e._v("两个微任务可以执行：")]),e._v(" "),n("ul",[n("li",[e._v("输出3。")]),e._v(" "),n("li",[e._v("输出5。")])]),e._v(" "),n("p",[e._v("第二轮事件循环结束，第二轮输出2，4，3，5。")]),e._v(" "),n("p",[n("strong",[e._v("（3）第三轮事件循环开始，此时只剩setTimeout2了，执行。")])]),e._v(" "),n("ul",[n("li",[e._v("直接输出9。")]),e._v(" "),n("li",[e._v("将"),n("code",[e._v("process.nextTick()")]),e._v("分发到微任务Event Queue中。记为"),n("code",[e._v("process3")]),e._v("。")]),e._v(" "),n("li",[e._v("直接执行"),n("code",[e._v("new Promise")]),e._v("，输出11。")]),e._v(" "),n("li",[e._v("将"),n("code",[e._v("then")]),e._v("分发到微任务Event Queue中，记为"),n("code",[e._v("then3")]),e._v("。")])]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("宏任务Event Queue")]),e._v(" "),n("th",[e._v("微任务Event Queue")])])]),e._v(" "),n("tbody",[n("tr",[n("td"),e._v(" "),n("td",[e._v("process3")])]),e._v(" "),n("tr",[n("td"),e._v(" "),n("td",[e._v("then3")])])])]),e._v(" "),n("p",[e._v("第三轮事件循环宏任务执行结束，执行两个微任务"),n("code",[e._v("process3")]),e._v("和"),n("code",[e._v("then3")]),e._v("：")]),e._v(" "),n("ul",[n("li",[e._v("输出10。")]),e._v(" "),n("li",[e._v("输出12。")])]),e._v(" "),n("p",[e._v("第三轮事件循环结束，第三轮输出9，11，10，12。")]),e._v(" "),n("p",[e._v("整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。")]),e._v(" "),n("h3",{attrs:{id:"_28-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_28-代码输出结果"}},[e._v("#")]),e._v(" 28. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(1)\n\nsetTimeout(() => {\n  console.log(2)\n})\n\nnew Promise(resolve =>  {\n  console.log(3)\n  resolve(4)\n}).then(d => console.log(d))\n\nsetTimeout(() => {\n  console.log(5)\n  new Promise(resolve =>  {\n    resolve(6)\n  }).then(d => console.log(d))\n})\n\nsetTimeout(() => {\n  console.log(7)\n})\n\nconsole.log(8)\n")])])]),n("p",[e._v("输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n3\n8\n4\n2\n5\n6\n7\n")])])]),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先执行script代码，打印出1；")]),e._v(" "),n("li",[e._v("遇到第一个定时器，加入到宏任务队列；")]),e._v(" "),n("li",[e._v("遇到Promise，执行代码，打印出3，遇到resolve，将其加入到微任务队列；")]),e._v(" "),n("li",[e._v("遇到第二个定时器，加入到宏任务队列；")]),e._v(" "),n("li",[e._v("遇到第三个定时器，加入到宏任务队列；")]),e._v(" "),n("li",[e._v("继续执行script代码，打印出8，第一轮执行结束；")]),e._v(" "),n("li",[e._v("执行微任务队列，打印出第一个Promise的resolve结果：4；")]),e._v(" "),n("li",[e._v("开始执行宏任务队列，执行第一个定时器，打印出2；")]),e._v(" "),n("li",[e._v("此时没有微任务，继续执行宏任务中的第二个定时器，首先打印出5，遇到Promise，首选打印出6，遇到resolve，将其加入到微任务队列；")]),e._v(" "),n("li",[e._v("执行微任务队列，打印出6；")]),e._v(" "),n("li",[e._v("执行宏任务队列中的最后一个定时器，打印出7。")])]),e._v(" "),n("h3",{attrs:{id:"_29-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_29-代码输出结果"}},[e._v("#")]),e._v(" 29. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(1);\n    \nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n")])])]),n("p",[e._v("代码输出结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1\n4\n7\n5\n2\n3\n6\n")])])]),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先执行scrip代码，打印出1；")]),e._v(" "),n("li",[e._v("遇到第一个定时器setTimeout，将其加入到宏任务队列；")]),e._v(" "),n("li",[e._v("遇到Promise，执行里面的同步代码，打印出4，遇到resolve，将其加入到微任务队列；")]),e._v(" "),n("li",[e._v("遇到第二个定时器setTimeout，将其加入到红任务队列；")]),e._v(" "),n("li",[e._v("执行script代码，打印出7，至此第一轮执行完成；")]),e._v(" "),n("li",[e._v("指定微任务队列中的代码，打印出resolve的结果：5；")]),e._v(" "),n("li",[e._v("执行宏任务中的第一个定时器setTimeout，首先打印出2，然后遇到 Promise.resolve().then()，将其加入到微任务队列；")]),e._v(" "),n("li",[e._v("执行完这个宏任务，就开始执行微任务队列，打印出3；")]),e._v(" "),n("li",[e._v("继续执行宏任务队列中的第二个定时器，打印出6。")])]),e._v(" "),n("h3",{attrs:{id:"_30-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-代码输出结果"}},[e._v("#")]),e._v(" 30. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve().then(() => {\n    console.log('1');\n    throw 'Error';\n}).then(() => {\n    console.log('2');\n}).catch(() => {\n    console.log('3');\n    throw 'Error';\n}).then(() => {\n    console.log('4');\n}).catch(() => {\n    console.log('5');\n}).then(() => {\n    console.log('6');\n});\n")])])]),n("p",[e._v("执行结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 \n3 \n5 \n6\n")])])]),n("p",[e._v("在这道题目中，我们需要知道，无论是thne还是catch中，只要throw 抛出了错误，就会被catch捕获，如果没有throw出错误，就被继续执行后面的then。")]),e._v(" "),n("h3",{attrs:{id:"_31-代码输出结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_31-代码输出结果"}},[e._v("#")]),e._v(" 31. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("setTimeout(function () {\n  console.log(1);\n}, 100);\n\nnew Promise(function (resolve) {\n  console.log(2);\n  resolve();\n  console.log(3);\n}).then(function () {\n  console.log(4);\n  new Promise((resove, reject) => {\n    console.log(5);\n    setTimeout(() =>  {\n      console.log(6);\n    }, 10);\n  })\n});\nconsole.log(7);\nconsole.log(8);\n")])])]),n("p",[e._v("输出结果为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("2\n3\n7\n8\n4\n5\n6\n1\n")])])]),n("p",[e._v("代码执行过程如下：")]),e._v(" "),n("ol",[n("li",[e._v("首先遇到定时器，将其加入到宏任务队列；")]),e._v(" "),n("li",[e._v("遇到Promise，首先执行里面的同步代码，打印出2，遇到resolve，将其加入到微任务队列，执行后面同步代码，打印出3；")]),e._v(" "),n("li",[e._v("继续执行script中的代码，打印出7和8，至此第一轮代码执行完成；")]),e._v(" "),n("li",[e._v("执行微任务队列中的代码，首先打印出4，如遇到Promise，执行其中的同步代码，打印出5，遇到定时器，将其加入到宏任务队列中，此时宏任务队列中有两个定时器；")]),e._v(" "),n("li",[e._v("执行宏任务队列中的代码，这里我们需要注意是的第一个定时器的时间为100ms，第二个定时器的时间为10ms，所以先执行第二个定时器，打印出6；")]),e._v(" "),n("li",[e._v("此时微任务队列为空，继续执行宏任务队列，打印出1。")])]),e._v(" "),n("p",[e._v("做完这道题目，我们就需要格外注意，每个定时器的时间，并不是所有定时器的时间都为0哦。")]),e._v(" "),n("h2",{attrs:{id:"二、this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、this"}},[e._v("#")]),e._v(" 二、this")]),e._v(" "),n("h3",{attrs:{id:"_1-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码输出结果-2"}},[e._v("#")]),e._v(" 1. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function foo() {\n  console.log( this.a );\n}\n\nfunction doFoo() {\n  foo();\n}\n\nvar obj = {\n  a: 1,\n  doFoo: doFoo\n};\n\nvar a = 2; \nobj.doFoo()\n")])])]),n("p",[e._v("输出结果：2")]),e._v(" "),n("p",[e._v("在Javascript中，this指向函数执行时的当前对象。在执行foo的时候，执行环境就是doFoo函数，执行环境为全局。所以，foo中的this是指向window的，所以会打印出2。")]),e._v(" "),n("h3",{attrs:{id:"_2-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码输出结果-2"}},[e._v("#")]),e._v(" 2. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var a = 10\nvar obj = {\n  a: 20,\n  say: () => {\n    console.log(this.a)\n  }\n}\nobj.say() \n\nvar anotherObj = { a: 30 } \nobj.say.apply(anotherObj) \n")])])]),n("p",[e._v("输出结果：10  10")]),e._v(" "),n("p",[e._v("我么知道，箭头函数时不绑定this的，它的this来自原其父级所处的上下文，所以首先会打印全局中的 a 的值10。后面虽然让say方法指向了另外一个对象，但是仍不能改变箭头函数的特性，它的this仍然是指向全局的，所以依旧会输出10。")]),e._v(" "),n("p",[e._v("但是，如果是普通函数，那么就会有完全不一样的结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var a = 10  \nvar obj = {  \n  a: 20,  \n  say(){\n    console.log(this.a)  \n  }  \n}  \nobj.say()   \nvar anotherObj={a:30}   \nobj.say.apply(anotherObj)\n")])])]),n("p",[e._v("输出结果：20 30")]),e._v(" "),n("p",[e._v("这时，say方法中的this就会指向他所在的对象，输出其中的a的值。")]),e._v(" "),n("h3",{attrs:{id:"_3-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码输出结果-2"}},[e._v("#")]),e._v(" 3. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function a() {\n  console.log(this);\n}\na.call(null);\n")])])]),n("p",[e._v("打印结果：window对象")]),e._v(" "),n("p",[e._v("根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined，call方法将把全局对象（浏览器上是window对象）作为this的值。所以，不管传入null 还是 undefined，其this都是全局对象window。所以，在浏览器上答案是输出 window 对象。")]),e._v(" "),n("p",[e._v("要注意的是，在严格模式中，null 就是 null，undefined 就是 undefined：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("'use strict';\n\nfunction a() {\n    console.log(this);\n}\na.call(null); // null\na.call(undefined); // undefined\n")])])]),n("h3",{attrs:{id:"_4-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码输出结果-2"}},[e._v("#")]),e._v(" 4. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var obj = { \n  name: 'cuggz', \n  fun: function(){ \n     console.log(this.name); \n  } \n} \nobj.fun()     // cuggz\nnew obj.fun() // undefined\n")])])]),n("h3",{attrs:{id:"_6-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-代码输出结果-2"}},[e._v("#")]),e._v(" 6. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var obj = {\n   say: function() {\n     var f1 = () =>  {\n       console.log("1111", this);\n     }\n     f1();\n   },\n   pro: {\n     getPro:() =>  {\n        console.log(this);\n     }\n   }\n}\nvar o = obj.say;\no();\nobj.say();\nobj.pro.getPro();\n')])])]),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1111 window对象\n1111 obj对象\nwindow对象\n")])])]),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("o()，o是在全局执行的，而f1是箭头函数，它是没有绑定this的，它的this指向其父级的this，其父级say方法的this指向的是全局作用域，所以会打印出window；")]),e._v(" "),n("li",[e._v("obj.say()，谁调用say，say 的this就指向谁，所以此时this指向的是obj对象；")]),e._v(" "),n("li",[e._v("obj.pro.getPro()，我们知道，箭头函数时不绑定this的，getPro处于pro中，而对象不构成单独的作用域，所以箭头的函数的this就指向了全局作用域window。")])]),e._v(" "),n("h3",{attrs:{id:"_7-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-代码输出结果-2"}},[e._v("#")]),e._v(" 7. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var myObject = {\n    foo: "bar",\n    func: function() {\n        var self = this;\n        console.log(this.foo);  \n        console.log(self.foo);  \n        (function() {\n            console.log(this.foo);  \n            console.log(self.foo);  \n        }());\n    }\n};\nmyObject.func();\n')])])]),n("p",[e._v("输出结果：bar bar undefined bar")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("首先func是由myObject调用的，this指向myObject。又因为var self = this;所以self指向myObject。")]),e._v(" "),n("li",[e._v("这个立即执行匿名函数表达式是由window调用的，this指向window 。立即执行匿名函数的作用域处于myObject.func的作用域中，在这个作用域找不到self变量，沿着作用域链向上查找self变量，找到了指向 myObject对象的self。")])]),e._v(" "),n("h3",{attrs:{id:"_8-代码输出问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-代码输出问题"}},[e._v("#")]),e._v(" 8. 代码输出问题")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("window.number = 2;\nvar obj = {\n number: 3,\n db1: (function(){\n   console.log(this);\n   this.number *= 4;\n   return function(){\n     console.log(this);\n     this.number *= 5;\n   }\n })()\n}\nvar db1 = obj.db1;\ndb1();\nobj.db1();\nconsole.log(obj.number);     // 15\nconsole.log(window.number);  // 40\n")])])]),n("p",[e._v("这道题目看清起来有点乱，但是实际上是考察this指向的:")]),e._v(" "),n("ol",[n("li",[e._v("执行db1()时，this指向全局作用域，所以window.number * 4 = 8，然后执行匿名函数， 所以window.number * 5 = 40；")]),e._v(" "),n("li",[e._v("执行obj.db1();时，this指向obj对象，执行匿名函数，所以obj.numer * 5 = 15。")])]),e._v(" "),n("h3",{attrs:{id:"_9-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-代码输出结果-2"}},[e._v("#")]),e._v(" 9. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var length = 10;\nfunction fn() {\n    console.log(this.length);\n}\n \nvar obj = {\n  length: 5,\n  method: function(fn) {\n    fn();\n    arguments[0]();\n  }\n};\n \nobj.method(fn, 1);\n")])])]),n("p",[e._v("输出结果： 10 2")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("第一次执行fn()，this指向window对象，输出10。")]),e._v(" "),n("li",[e._v("第二次执行arguments"),n("a",{attrs:{href:""}},[e._v("0")]),e._v("，相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。")])]),e._v(" "),n("h3",{attrs:{id:"_10-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-代码输出结果-2"}},[e._v("#")]),e._v(" 10. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var a = 1;\nfunction printA(){\n  console.log(this.a);\n}\nvar obj={\n  a:2,\n  foo:printA,\n  bar:function(){\n    printA();\n  }\n}\n\nobj.foo(); // 2\nobj.bar(); // 1\nvar foo = obj.foo;\nfoo(); // 1\n")])])]),n("p",[e._v("输出结果： 2 1 1")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("obj.foo()，foo 的this指向obj对象，所以a会输出2；")]),e._v(" "),n("li",[e._v("obj.bar()，printA在bar方法中执行，所以此时printA的this指向的是window，所以会输出1；")]),e._v(" "),n("li",[e._v("foo()，foo是在全局对象中执行的，所以其this指向的是window，所以会输出1；")])]),e._v(" "),n("h3",{attrs:{id:"_11-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-代码输出结果-2"}},[e._v("#")]),e._v(" 11. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var x = 3;\nvar y = 4;\nvar obj = {\n    x: 1,\n    y: 6,\n    getX: function() {\n        var x = 5;\n        return function() {\n            return this.x;\n        }();\n    },\n    getY: function() {\n        var y = 7;\n        return this.y;\n    }\n}\nconsole.log(obj.getX()) // 3\nconsole.log(obj.getY()) // 6\n")])])]),n("p",[e._v("输出结果：3  6")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("我们知道，匿名函数的this是指向全局对象的，所以this指向window，会打印出3；")]),e._v(" "),n("li",[e._v("getY是由obj调用的，所以其this指向的是obj对象，会打印出6。")])]),e._v(" "),n("h3",{attrs:{id:"_12-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-代码输出结果-2"}},[e._v("#")]),e._v(" 12. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" var a = 10; \n var obt = { \n   a: 20, \n   fn: function(){ \n     var a = 30; \n     console.log(this.a)\n   } \n }\n obt.fn();  // 20\n obt.fn.call(); // 10\n (obt.fn)(); // 20\n")])])]),n("p",[e._v("输出结果： 20  10  20")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("obt.fn()，fn是由obt调用的，所以其this指向obt对象，会打印出20；")]),e._v(" "),n("li",[e._v("obt.fn.call()，这里call的参数啥都没写，就表示null，我们知道如果call的参数为undefined或null，那么this就会指向全局对象this，所以会打印出 10；")]),e._v(" "),n("li",[e._v("(obt.fn)()， 这里给表达式加了括号，而括号的作用是改变表达式的运算顺序，而在这里加与不加括号并无影响；相当于  obt.fn()，所以会打印出 20；")])]),e._v(" "),n("h3",{attrs:{id:"_13-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-代码输出结果-2"}},[e._v("#")]),e._v(" 13. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function a(xx){\n  this.x = xx;\n  return this\n};\nvar x = a(5);\nvar y = a(6);\n\nconsole.log(x.x)  // undefined\nconsole.log(y.x)  // 6\n")])])]),n("p",[e._v("输出结果： undefined  6")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("最关键的就是var x = a(5)，函数a是在全局作用域调用，所以函数内部的this指向window对象。**所以 this.x = 5 就相当于：window.x = 5。**之后 return this，也就是说 var x = a(5) 中的x变量的值是window，这里的x将函数内部的x的值覆盖了。然后执行console.log(x.x)， 也就是console.log(window.x)，而window对象中没有x属性，所以会输出undefined。")]),e._v(" "),n("li",[e._v("当指向y.x时，会给全局变量中的x赋值为6，所以会打印出6。")])]),e._v(" "),n("h3",{attrs:{id:"_14-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-代码输出结果-2"}},[e._v("#")]),e._v(" 14. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function foo(something){\n    this.a = something\n}\n\nvar obj1 = {\n    foo: foo\n}\n\nvar obj2 = {}\n\nobj1.foo(2); \nconsole.log(obj1.a); // 2\n\nobj1.foo.call(obj2, 3);\nconsole.log(obj2.a); // 3\n\nvar bar = new obj1.foo(4)\nconsole.log(obj1.a); // 2\nconsole.log(bar.a); // 4\n")])])]),n("p",[e._v("输出结果： 2  3  2  4")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("首先执行obj1.foo(2); 会在obj中添加a属性，其值为2。之后执行obj1.a，a是右obj1调用的，所以this指向obj，打印出2；")]),e._v(" "),n("li",[e._v("执行 obj1.foo.call(obj2, 3) 时，会将foo的this指向obj2，后面就和上面一样了，所以会打印出3；")]),e._v(" "),n("li",[e._v("obj1.a会打印出2；")]),e._v(" "),n("li",[e._v("最后就是考察this绑定的优先级了，new 绑定是比隐式绑定优先级高，所以会输出4。")])]),e._v(" "),n("h3",{attrs:{id:"_15-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-代码输出结果-2"}},[e._v("#")]),e._v(" 15. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function foo(something){\n    this.a = something\n}\n\nvar obj1 = {}\n\nvar bar = foo.bind(obj1);\nbar(2);\nconsole.log(obj1.a); // 2\n\nvar baz = new bar(3);\nconsole.log(obj1.a); // 2\nconsole.log(baz.a); // 3\n")])])]),n("p",[e._v("输出结果： 2  2  3")]),e._v(" "),n("p",[e._v("这道题目和上面题目差不多，主要都是考察this绑定的优先级。记住以下结论即可：**this绑定的优先级：**"),n("strong",[e._v("new绑定 > 显式绑定 > 隐式绑定 > 默认绑定。")])]),e._v(" "),n("h2",{attrs:{id:"三、作用域-变量提升-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、作用域-变量提升-闭包"}},[e._v("#")]),e._v(" 三、作用域&变量提升&闭包")]),e._v(" "),n("h3",{attrs:{id:"_1-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码输出结果-3"}},[e._v("#")]),e._v(" 1. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function(){\n   var x = y = 1;\n})();\nvar z;\n\nconsole.log(y); // 1\nconsole.log(z); // undefined\nconsole.log(x); // Uncaught ReferenceError: x is not defined\n")])])]),n("p",[e._v("这段代码的关键在于：var x = y = 1; 实际上这里是从右往左执行的，首先执行y = 1, 因为y没有使用var声明，所以它是一个全局变量，然后第二步是将y赋值给x，讲一个全局变量赋值给了一个局部变量，最终，x是一个局部变量，y是一个全局变量，所以打印x是报错。")]),e._v(" "),n("h3",{attrs:{id:"_2-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码输出结果-3"}},[e._v("#")]),e._v(" 2. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var a, b\n(function () {\n   console.log(a);\n   console.log(b);\n   var a = (b = 3);\n   console.log(a);\n   console.log(b);   \n})()\nconsole.log(a);\nconsole.log(b);\n")])])]),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("undefined \nundefined \n3 \n3 \nundefined \n3\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("undefined \nundefined \n3 \n3 \nundefined \n3\n")])])]),n("p",[e._v("这个题目和上面题目考察的知识点类似，b赋值为3，b此时是一个全局变量，而将3赋值给a，a是一个局部变量，所以最后打印的时候，a仍旧是undefined。")]),e._v(" "),n("h3",{attrs:{id:"_3-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码输出结果-3"}},[e._v("#")]),e._v(" 3. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var friendName = 'World';\n(function() {\n  if (typeof friendName === 'undefined') {\n    var friendName = 'Jack';\n    console.log('Goodbye ' + friendName);\n  } else {\n    console.log('Hello ' + friendName);\n  }\n})();\n")])])]),n("p",[e._v("输出结果：Goodbye Jack")]),e._v(" "),n("p",[e._v("我们知道，在 JavaScript中， Function 和 var 都会被提升（变量提升），所以上面的代码就相当于：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var name = 'World!';\n(function () {\n    var name;\n    if (typeof name === 'undefined') {\n        name = 'Jack';\n        console.log('Goodbye ' + name);\n    } else {\n        console.log('Hello ' + name);\n    }\n})();\n")])])]),n("p",[e._v("这样，答案就一目了然了。")]),e._v(" "),n("h3",{attrs:{id:"_4-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码输出结果-3"}},[e._v("#")]),e._v(" 4. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function fn1(){\n  console.log('fn1')\n}\nvar fn2\n \nfn1()\nfn2()\n \nfn2 = function() {\n  console.log('fn2')\n}\n \nfn2()\n")])])]),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fn1\nUncaught TypeError: fn2 is not a function\nfn2\n")])])]),n("p",[e._v("这里也是在考察变量提升，关键在于第一个fn2()，这时fn2仍是一个undefined的变量，所以会报错fn2不是一个函数。")]),e._v(" "),n("h3",{attrs:{id:"_5-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-代码输出结果-2"}},[e._v("#")]),e._v(" 5. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function a() {\n    var temp = 10;\n    function b() {\n        console.log(temp); // 10\n    }\n    b();\n}\na();\n\nfunction a() {\n    var temp = 10;\n    b();\n}\nfunction b() {\n    console.log(temp); // 报错 Uncaught ReferenceError: temp is not defined\n}\na();\n")])])]),n("p",[e._v("在上面的两段代码中，第一段是可以正常输出，这个应该没啥问题，关键在于第二段代码，它会报错Uncaught ReferenceError: temp is not defined。这时因为在b方法执行时，temp 的值为undefined。")]),e._v(" "),n("h3",{attrs:{id:"_6-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-代码输出结果-3"}},[e._v("#")]),e._v(" 6. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" var a=3;\n function c(){\n    alert(a);\n }\n (function(){\n  var a=4;\n  c();\n })();\n")])])]),n("p",[e._v("js中变量的作用域链与定义时的环境有关，与执行时无关。执行环境只会改变this、传递的参数、全局变量等")]),e._v(" "),n("h3",{attrs:{id:"_7-代码输出问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-代码输出问题"}},[e._v("#")]),e._v(" 7.  代码输出问题")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function fun(n, o) {\n  console.log(o)\n  return {\n    fun: function(m){\n      return fun(m, n);\n    }\n  };\n}\nvar a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);\nvar b = fun(0).fun(1).fun(2).fun(3);\nvar c = fun(0).fun(1);  c.fun(2);  c.fun(3);\n")])])]),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("undefined  0  0  0\nundefined  0  1  2\nundefined  0  1  1\n")])])]),n("p",[e._v("这是一道关于闭包的题目，对于fun方法，调用之后返回的是一个对象。我们知道，当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值。所以 "),n("code",[e._v("console.log(o);")]),e._v(" 会输出undefined。而a就是是fun(0)返回的那个对象。也就是说，函数fun中参数 n 的值是0，而返回的那个对象中，需要一个参数n，而这个对象的作用域中没有n，它就继续沿着作用域向上一级的作用域中寻找n，最后在函数fun中找到了n，n的值是0。了解了这一点，其他运算就很简单了，以此类推。")]),e._v(" "),n("h3",{attrs:{id:"_8-代码输出结果-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-代码输出结果-2"}},[e._v("#")]),e._v(" 8. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("f = function() {return true;};   \ng = function() {return false;};   \n(function() {   \n   if (g() && [] == ![]) {   \n      f = function f() {return false;};   \n      function g() {return true;}   \n   }   \n})();   \nconsole.log(f());\n")])])]),n("p",[e._v("输出结果： false")]),e._v(" "),n("p",[e._v("这里首先定义了两个变量f和g，我们知道变量是可以重新赋值的。后面是一个匿名自执行函数，在 if 条件中调用了函数 g()，由于在匿名函数中，又重新定义了函数g，就覆盖了外部定义的变量g，所以，这里调用的是内部函数 g 方法，返回为 true。第一个条件通过，进入第二个条件。")]),e._v(" "),n("p",[e._v("第二个条件是[] == ![]，先看 ![] ，在 JavaScript 中，当用于布尔运算时，比如在这里，对象的非空引用被视为 true，空引用 null 则被视为 false。由于这里不是一个 null, 而是一个没有元素的数组，所以 [] 被视为 true, 而 ![] 的结果就是 false 了。当一个布尔值参与到条件运算的时候，true 会被看作 1, 而 false 会被看作 0。现在条件变成了 [] == 0 的问题了，当一个对象参与条件比较的时候，它会被求值，求值的结果是数组成为一个字符串，[] 的结果就是 '' ，而 '' 会被当作 0 ，所以，条件成立。")]),e._v(" "),n("p",[e._v("两个条件都成立，所以会执行条件中的代码， f 在定义是没有使用var，所以他是一个全局变量。因此，这里会通过闭包访问到外部的变量 f, 重新赋值，现在执行 f 函数返回值已经成为 false 了。而 g 则不会有这个问题，这里是一个函数内定义的 g，不会影响到外部的 g 函数。所以最后的结果就是 false。")]),e._v(" "),n("h2",{attrs:{id:"四、原型-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、原型-继承"}},[e._v("#")]),e._v(" 四、原型&继承")]),e._v(" "),n("h3",{attrs:{id:"_1-代码输出结果-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码输出结果-4"}},[e._v("#")]),e._v(" 1. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person(name) {\n    this.name = name\n}\nvar p2 = new Person('king');\nconsole.log(p2.__proto__) //Person.prototype\nconsole.log(p2.__proto__.__proto__) //Object.prototype\nconsole.log(p2.__proto__.__proto__.__proto__) // null\nconsole.log(p2.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错\nconsole.log(p2.__proto__.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错\nconsole.log(p2.constructor)//Person\nconsole.log(p2.prototype)//undefined p2是实例，没有prototype属性\nconsole.log(Person.constructor)//Function 一个空函数\nconsole.log(Person.prototype)//打印出Person.prototype这个对象里所有的方法和属性\nconsole.log(Person.prototype.constructor)//Person\nconsole.log(Person.prototype.__proto__)// Object.prototype\nconsole.log(Person.__proto__) //Function.prototype\nconsole.log(Function.prototype.__proto__)//Object.prototype\nconsole.log(Function.__proto__)//Function.prototype\nconsole.log(Object.__proto__)//Function.prototype\nconsole.log(Object.prototype.__proto__)//null\n")])])]),n("p",[e._v("这道义题目考察原型、原型链的基础，记住就可以了。")]),e._v(" "),n("h3",{attrs:{id:"_2-代码输出结果-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码输出结果-4"}},[e._v("#")]),e._v(" 2. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// a\nfunction Foo () {\n getName = function () {\n   console.log(1);\n }\n return this;\n}\n// b\nFoo.getName = function () {\n console.log(2);\n}\n// c\nFoo.prototype.getName = function () {\n console.log(3);\n}\n// d\nvar getName = function () {\n console.log(4);\n}\n// e\nfunction getName () {\n console.log(5);\n}\n\nFoo.getName();           // 2\ngetName();               // 4\nFoo().getName();         // 1\ngetName();               // 1 \nnew Foo.getName();       // 2\nnew Foo().getName();     // 3\nnew new Foo().getName(); // 3\n")])])]),n("p",[e._v("输出结果：2  4  1  1  2  3  3")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("**Foo.getName()，**Foo为一个函数对象，对象都可以有属性，b 处定义Foo的getName属性为函数，输出2；")]),e._v(" "),n("li",[e._v("**getName()，**这里看d、e处，d为函数表达式，e为函数声明，两者区别在于变量提升，函数声明的 5 会被后边函数表达式的 4 覆盖；")]),e._v(" "),n("li",[e._v("**Foo().getName()，**这里要看a处，在Foo内部将全局的getName重新赋值为 console.log(1) 的函数，执行Foo()返回 this，这个this指向window，Foo().getName() 即为window.getName()，输出 1；")]),e._v(" "),n("li",[e._v("**getName()，**上面3中，全局的getName已经被重新赋值，所以这里依然输出 1；")]),e._v(" "),n("li",[e._v("**new Foo.getName()，**这里等价于 new (Foo.getName())，先执行 Foo.getName()，输出 2，然后new一个实例；")]),e._v(" "),n("li",[e._v("**new Foo().getName()，**这里等价于 (new Foo()).getName(), 先new一个Foo的实例，再执行这个实例的getName方法，但是这个实例本身没有这个方法，所以去原型链__protot__上边找，实例."),n("strong",[e._v("protot")]),e._v(" === Foo.prototype，所以输出 3；")]),e._v(" "),n("li",[e._v("**new new Foo().getName()，**这里等价于new (new Foo().getName())，如上述6，先输出 3，然后new 一个 new Foo().getName() 的实例。")])]),e._v(" "),n("h3",{attrs:{id:"_3-代码输出结果-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码输出结果-4"}},[e._v("#")]),e._v(" 3. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var F = function() {};\nObject.prototype.a = function() {\n  console.log('a');\n};\nFunction.prototype.b = function() {\n  console.log('b');\n}\nvar f = new F();\nf.a();\nf.b();\nF.a();\nF.b()\n")])])]),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("a\nUncaught TypeError: f.b is not a function\na\nb\n")])])]),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("f 并不是 Function 的实例，因为它本来就不是构造函数，调用的是 Function 原型链上的相关属性和方法，只能访问到 Object 原型链。所以 f.a() 输出 a  ，而 f.b() 就报错了。")]),e._v(" "),n("li",[e._v("F 是个构造函数，而 F 是构造函数 Function 的一个实例。因为 F instanceof  Object === true，F instanceof Function === true，由此可以得出结论：F 是 Object 和 Function 两个的实例，即 F 能访问到 a， 也能访问到 b。所以 F.a() 输出 a ，F.b() 输出 b。")])]),e._v(" "),n("h3",{attrs:{id:"_4-代码输出结果-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码输出结果-4"}},[e._v("#")]),e._v(" 4. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Foo(){\n    Foo.a = function(){\n        console.log(1);\n    }\n    this.a = function(){\n        console.log(2)\n    }\n}\n\nFoo.prototype.a = function(){\n    console.log(3);\n}\n\nFoo.a = function(){\n    console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n")])])]),n("p",[e._v("输出结果：4 2 1")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("Foo.a() 这个是调用 Foo 函数的静态方法 a，虽然 Foo 中有优先级更高的属性方法 a，但 Foo 此时没有被调用，所以此时输出 Foo 的静态方法 a 的结果：4")]),e._v(" "),n("li",[e._v("let obj = new Foo(); 使用了 new 方法调用了函数，返回了函数实例对象，此时 Foo 函数内部的属性方法初始化，原型链建立。")]),e._v(" "),n("li",[e._v("obj.a() ; 调用 obj 实例上的方法 a，该实例上目前有两个 a 方法：一个是内部属性方法，另一个是原型上的方法。当这两者都存在时，首先查找 ownProperty ，如果没有才去原型链上找，所以调用实例上的 a 输出：2")]),e._v(" "),n("li",[e._v("Foo.a() ; 根据第2步可知 Foo 函数内部的属性方法已初始化，覆盖了同名的静态方法，所以输出：1")])]),e._v(" "),n("h3",{attrs:{id:"_5-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-代码输出结果-3"}},[e._v("#")]),e._v(" 5. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Dog() {\n  this.name = 'puppy'\n}\nDog.prototype.bark = () => {\n  console.log('woof!woof!')\n}\nconst dog = new Dog()\nconsole.log(Dog.prototype.constructor === Dog && dog.constructor === Dog && dog instanceof Dog)\n")])])]),n("p",[e._v("输出结果：true")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("p",[e._v("因为constructor是prototype上的属性，所以dog.constructor实际上就是指向Dog.prototype.constructor；constructor属性指向构造函数。instanceof而实际检测的是类型是否在实例的原型链上。")]),e._v(" "),n("p",[e._v("constructor是prototype上的属性，这一点很容易被忽略掉。constructor和instanceof 的作用是不同的，感性地来说，constructor的限制比较严格，它只能严格对比对象的构造函数是不是指定的值；而instanceof比较松散，只要检测的类型在原型链上，就会返回true。")]),e._v(" "),n("h3",{attrs:{id:"_6-代码输出结果-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-代码输出结果-4"}},[e._v("#")]),e._v(" 6. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var A = {n: 4399};\nvar B =  function(){this.n = 9999};\nvar C =  function(){var n = 8888};\nB.prototype = A;\nC.prototype = A;\nvar b = new B();\nvar c = new C();\nA.n++\nconsole.log(b.n);\nconsole.log(c.n);\n")])])]),n("p",[e._v("输出结果：9999  4400")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("console.log(b.n)，在查找b.n是首先查找 b 对象自身有没有 n 属性，如果没有会去原型（prototype）上查找，当执行var b = new B()时，函数内部this.n=9999(此时this指向 b) 返回b对象，b对象有自身的n属性，所以返回 9999。")]),e._v(" "),n("li",[e._v("console.log(c.n)，同理，当执行var c = new C()时，c对象没有自身的n属性，向上查找，找到原型 （prototype）上的 n 属性，因为 A.n++(此时对象A中的n为4400)， 所以返回4400。")])]),e._v(" "),n("h3",{attrs:{id:"_7-代码输出问题-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-代码输出问题-2"}},[e._v("#")]),e._v(" 7. 代码输出问题")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function A(){\n}\nfunction B(a){\n　　this.a = a;\n}\nfunction C(a){\n　　if(a){\nthis.a = a;\n　　}\n}\nA.prototype.a = 1;\nB.prototype.a = 1;\nC.prototype.a = 1;\n \nconsole.log(new A().a);\nconsole.log(new B().a);\nconsole.log(new C(2).a);\n")])])]),n("p",[e._v("输出结果：1  undefined  2")]),e._v(" "),n("p",[n("strong",[e._v("解析：")])]),e._v(" "),n("ol",[n("li",[e._v("console.log(new A().a)，new A()为构造函数创建的对象，本身没有a属性，所以向它的原型去找，发现原型的a属性的属性值为1，故该输出值为1；")]),e._v(" "),n("li",[e._v("console.log(new B().a)，ew B()为构造函数创建的对象，该构造函数有参数a，但该对象没有传参，故该输出值为undefined;")]),e._v(" "),n("li",[e._v("console.log(new C(2).a)，new C()为构造函数创建的对象，该构造函数有参数a，且传的实参为2，执行函数内部，发现if为真，执行this.a = 2,故属性a的值为2。")])]),e._v(" "),n("h3",{attrs:{id:"_8-代码输出问题-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-代码输出问题-2"}},[e._v("#")]),e._v(" 8 代码输出问题")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Parent() {\n    this.a = 1;\n    this.b = [1, 2, this.a];\n    this.c = { demo: 5 };\n    this.show = function () {\n        console.log(this.a , this.b , this.c.demo );\n    }\n}\n\nfunction Child() {\n    this.a = 2;\n    this.change = function () {\n        this.b.push(this.a);\n        this.a = this.b.length;\n        this.c.demo = this.a++;\n    }\n}\n\nChild.prototype = new Parent();\nvar parent = new Parent();\nvar child1 = new Child();\nvar child2 = new Child();\nchild1.a = 11;\nchild2.a = 12;\nparent.show();\nchild1.show();\nchild2.show();\nchild1.change();\nchild2.change();\nparent.show();\nchild1.show();\nchild2.show();\n")])])]),n("p",[e._v("输出结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("parent.show(); // 1  [1,2,1] 5\n\nchild1.show(); // 11 [1,2,1] 5\nchild2.show(); // 12 [1,2,1] 5\n\nparent.show(); // 1 [1,2,1] 5\n\nchild1.show(); // 5 [1,2,1,11,12] 5\n\nchild2.show(); // 6 [1,2,1,11,12] 5\n")])])]),n("p",[e._v("这道题目值得神帝，他涉及到的知识点很多，例如"),n("strong",[e._v("this的指向、原型、原型链、类的继承、数据类型")]),e._v("等。")]),e._v(" "),n("p",[n("strong",[e._v("解析")]),e._v("**：**")]),e._v(" "),n("ol",[n("li",[e._v("parent.show()，可以直接获得所需的值，没啥好说的；")]),e._v(" "),n("li",[e._v("child1.show()，"),n("code",[e._v("Child")]),e._v("的构造函数原本是指向"),n("code",[e._v("Child")]),e._v("的，题目显式将"),n("code",[e._v("Child")]),e._v("类的原型对象指向了"),n("code",[e._v("Parent")]),e._v("类的一个实例，需要注意"),n("code",[e._v("Child.prototype")]),e._v("指向的是"),n("code",[e._v("Parent")]),e._v("的实例"),n("code",[e._v("parent")]),e._v("，而不是指向"),n("code",[e._v("Parent")]),e._v("这个类。")]),e._v(" "),n("li",[e._v("child2.show()，这个也没啥好说的；")]),e._v(" "),n("li",[e._v("parent.show()，"),n("code",[e._v("parent")]),e._v("是一个"),n("code",[e._v("Parent")]),e._v("类的实例，"),n("code",[e._v("Child.prorotype")]),e._v("指向的是"),n("code",[e._v("Parent")]),e._v("类的另一个实例，两者在堆内存中互不影响，所以上述操作不影响"),n("code",[e._v("parent")]),e._v("实例，所以输出结果不变；")]),e._v(" "),n("li",[e._v("child1.show()，"),n("code",[e._v("child1")]),e._v("执行了"),n("code",[e._v("change()")]),e._v("方法后，发生了怎样的变化呢?")])]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("this.b.push(this.a)，"),n("strong",[e._v("由于this的动态指向特性，this.b会指向"),n("code",[e._v("Child.prototype")]),e._v("上的")]),e._v("b")]),e._v("数组,this.a会指向"),n("code",[e._v("child1")]),e._v("的"),n("strong",[e._v("a")]),e._v("属性,所以"),n("code",[e._v("Child.prototype.b")]),e._v("变成了**[1,2,1,11]**;")]),e._v(" "),n("li",[n("strong",[e._v("this.a = this.b.length，"),n("strong",[e._v("这条语句中"),n("code",[e._v("this.a")]),e._v("和"),n("code",[e._v("this.b")]),e._v("的指向与上一句一致，故结果为"),n("code",[e._v("child1.a")]),e._v("变为")]),e._v("4")]),e._v(";")]),e._v(" "),n("li",[n("strong",[e._v("this.c.demo = this.a++，"),n("strong",[e._v("由于"),n("code",[e._v("child1")]),e._v("自身属性并没有")]),e._v("c")]),e._v("这个属性，所以此处的"),n("code",[e._v("this.c")]),e._v("会指向"),n("code",[e._v("Child.prototype.c")]),e._v("，"),n("code",[e._v("this.a")]),e._v("值为"),n("strong",[e._v("4")]),e._v("，为原始类型，故赋值操作时会直接赋值，"),n("code",[e._v("Child.prototype.c.demo")]),e._v("的结果为"),n("strong",[e._v("4")]),e._v("，而"),n("code",[e._v("this.a")]),e._v("随后自增为"),n("strong",[e._v("5(4 + 1 = 5)。")])])]),e._v(" "),n("ol",[n("li",[n("code",[e._v("child2")]),e._v("执行了"),n("code",[e._v("change()")]),e._v("方法, 而"),n("code",[e._v("child2")]),e._v("和"),n("code",[e._v("child1")]),e._v("均是"),n("code",[e._v("Child")]),e._v("类的实例，所以他们的原型链指向同一个原型对象"),n("code",[e._v("Child.prototype")]),e._v(",也就是同一个"),n("code",[e._v("parent")]),e._v("实例，所以"),n("code",[e._v("child2.change()")]),e._v("中所有影响到原型对象的语句都会影响"),n("code",[e._v("child1")]),e._v("的最终输出结果。")])]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("this.b.push(this.a)，"),n("strong",[e._v("由于this的动态指向特性，this.b会指向"),n("code",[e._v("Child.prototype")]),e._v("上的")]),e._v("b")]),e._v("数组,this.a会指向"),n("code",[e._v("child2")]),e._v("的"),n("strong",[e._v("a")]),e._v("属性,所以"),n("code",[e._v("Child.prototype.b")]),e._v("变成了**[1,2,1,11,12]**;")]),e._v(" "),n("li",[n("strong",[e._v("this.a = this.b.length，"),n("strong",[e._v("这条语句中"),n("code",[e._v("this.a")]),e._v("和"),n("code",[e._v("this.b")]),e._v("的指向与上一句一致，故结果为"),n("code",[e._v("child2.a")]),e._v("变为")]),e._v("5")]),e._v(";")]),e._v(" "),n("li",[n("strong",[e._v("this.c.demo = this.a++，"),n("strong",[e._v("由于"),n("code",[e._v("child2")]),e._v("自身属性并没有")]),e._v("c")]),e._v("这个属性，所以此处的"),n("code",[e._v("this.c")]),e._v("会指向"),n("code",[e._v("Child.prototype.c")]),e._v("，故执行结果为"),n("code",[e._v("Child.prototype.c.demo")]),e._v("的值变为"),n("code",[e._v("child2.a")]),e._v("的值"),n("strong",[e._v("5")]),e._v("，而"),n("code",[e._v("child2.a")]),e._v("最终自增为"),n("strong",[e._v("6(5 + 1 = 6)。")])])]),e._v(" "),n("h3",{attrs:{id:"_9-代码输出结果-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-代码输出结果-3"}},[e._v("#")]),e._v(" 9. 代码输出结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function SuperType(){\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty = false;\n}\n\nSubType.prototype = new SuperType();\nSubType.prototype.getSubValue = function (){\n    return this.subproperty;\n};\n\nvar instance = new SubType();\nconsole.log(instance.getSuperValue());\n")])])]),n("p",[e._v("输出结果：true")]),e._v(" "),n("p",[e._v("实际上，这段代码就是在实现原型链继承，SubType继承了SuperType，本质是重写了SubType的原型对象，代之以一个新类型的实例。SubType的原型被重写了，所以instance.constructor指向的是SuperType。具体如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://xiumubai.oss-cn-beijing.aliyuncs.com/blog/1620043144097-44798602-b916-406d-bc50-e003f27dece2.png",alt:"image.png"}})])])}),[],!1,null,null,null);n.default=o.exports}}]);