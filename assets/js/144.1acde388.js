(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{461:function(t,n,a){"use strict";a.r(n);var s=a(3),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[n("img",{attrs:{src:"https://xiumubai.oss-cn-beijing.aliyuncs.com/blog/1621676946378-71d6b405-ef4e-42e4-9e42-f9c9aafcefb6.png",alt:"手写代码面试题.png"}})]),t._v(" "),n("p",[t._v("##手写系列建议配合鲨鱼哥的掘金手写面试题文章一起看（更多更全）")]),t._v(" "),n("h2",{attrs:{id:"一、javascript-基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript-基础"}},[t._v("#")]),t._v(" 一、JavaScript 基础")]),t._v(" "),n("h3",{attrs:{id:"_1-手写-object-create"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-手写-object-create"}},[t._v("#")]),t._v(" 1. 手写 Object.create")]),t._v(" "),n("p",[t._v("思路：将传入的对象作为原型")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function create(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n")])])]),n("h3",{attrs:{id:"_2-手写-instanceof-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-手写-instanceof-方法"}},[t._v("#")]),t._v(" 2. 手写 instanceof 方法")]),t._v(" "),n("p",[t._v("instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。")]),t._v(" "),n("p",[t._v("实现步骤：")]),t._v(" "),n("ol",[n("li",[t._v("首先获取类型的原型")]),t._v(" "),n("li",[t._v("然后获得对象的原型")]),t._v(" "),n("li",[t._v("然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 "),n("code",[t._v("null")]),t._v("，因为原型链最终为 "),n("code",[t._v("null")])])]),t._v(" "),n("p",[t._v("具体实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function myInstanceof(left, right) {\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n      prototype = right.prototype; // 获取构造函数的 prototype 对象\n\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n")])])]),n("h3",{attrs:{id:"_3-手写-new-操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-手写-new-操作符"}},[t._v("#")]),t._v(" 3. 手写 new 操作符")]),t._v(" "),n("p",[t._v("在调用 "),n("code",[t._v("new")]),t._v(" 的过程中会发生以上四件事情：")]),t._v(" "),n("p",[t._v("（1）首先创建了一个新的空对象")]),t._v(" "),n("p",[t._v("（2）设置原型，将对象的原型设置为函数的 prototype 对象。")]),t._v(" "),n("p",[t._v("（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）")]),t._v(" "),n("p",[t._v("（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== "function") {\n    console.error("type error");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === "object" || typeof result === "function");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n')])])]),n("h3",{attrs:{id:"_4-手写-promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-手写-promise"}},[t._v("#")]),t._v(" 4. 手写 Promise")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('const PENDING = "pending";\nconst RESOLVED = "resolved";\nconst REJECTED = "rejected";\n\nfunction MyPromise(fn) {\n  // 保存初始化状态\n  var self = this;\n\n  // 初始化状态\n  this.state = PENDING;\n\n  // 用于保存 resolve 或者 rejected 传入的值\n  this.value = null;\n\n  // 用于保存 resolve 的回调函数\n  this.resolvedCallbacks = [];\n\n  // 用于保存 reject 的回调函数\n  this.rejectedCallbacks = [];\n\n  // 状态转变为 resolved 方法\n  function resolve(value) {\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof MyPromise) {\n      return value.then(resolve, reject);\n    }\n\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变，\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = RESOLVED;\n\n        // 设置传入的值\n        self.value = value;\n\n        // 执行回调函数\n        self.resolvedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n\n  // 状态转变为 rejected 方法\n  function reject(value) {\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = REJECTED;\n\n        // 设置传入的值\n        self.value = value;\n\n        // 执行回调函数\n        self.rejectedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n\n  // 将两个方法传入函数执行\n  try {\n    fn(resolve, reject);\n  } catch (e) {\n    // 遇到错误时，捕获错误，执行 reject 函数\n    reject(e);\n  }\n}\n\nMyPromise.prototype.then = function(onResolved, onRejected) {\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onResolved =\n    typeof onResolved === "function"\n      ? onResolved\n      : function(value) {\n          return value;\n        };\n\n  onRejected =\n    typeof onRejected === "function"\n      ? onRejected\n      : function(error) {\n          throw error;\n        };\n\n  // 如果是等待状态，则将函数加入对应列表中\n  if (this.state === PENDING) {\n    this.resolvedCallbacks.push(onResolved);\n    this.rejectedCallbacks.push(onRejected);\n  }\n\n  // 如果状态已经凝固，则直接执行对应状态的函数\n\n  if (this.state === RESOLVED) {\n    onResolved(this.value);\n  }\n\n  if (this.state === REJECTED) {\n    onRejected(this.value);\n  }\n};\n')])])]),n("h3",{attrs:{id:"_5-手写-promise-then"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-手写-promise-then"}},[t._v("#")]),t._v(" 5. 手写 Promise.then")]),t._v(" "),n("p",[n("code",[t._v("then")]),t._v(" 方法返回一个新的 "),n("code",[t._v("promise")]),t._v(" 实例，为了在 "),n("code",[t._v("promise")]),t._v(" 状态发生变化时（"),n("code",[t._v("resolve")]),t._v(" / "),n("code",[t._v("reject")]),t._v(" 被调用时）再执行 "),n("code",[t._v("then")]),t._v(" 里的函数，我们使用一个 "),n("code",[t._v("callbacks")]),t._v(" 数组先把传给then的函数暂存起来，等状态改变时再调用。")]),t._v(" "),n("p",[n("strong",[t._v("那么，怎么保证后一个")]),t._v(" "),n("code",[t._v("**then**")]),t._v(" "),n("strong",[t._v("里的方法在前一个")]),t._v(" "),n("code",[t._v("**then**")]),n("strong",[t._v("（可能是异步）结束之后再执行呢？")])]),t._v(" "),n("p",[t._v("我们可以将传给 "),n("code",[t._v("then")]),t._v(" 的函数和新 "),n("code",[t._v("promise")]),t._v(" 的 "),n("code",[t._v("resolve")]),t._v(" 一起 "),n("code",[t._v("push")]),t._v(" 到前一个 "),n("code",[t._v("promise")]),t._v(" 的 "),n("code",[t._v("callbacks")]),t._v(" 数组中，达到承前启后的效果：")]),t._v(" "),n("ul",[n("li",[t._v("承前：当前一个 "),n("code",[t._v("promise")]),t._v(" 完成后，调用其 "),n("code",[t._v("resolve")]),t._v(" 变更状态，在这个 "),n("code",[t._v("resolve")]),t._v(" 里会依次调用 "),n("code",[t._v("callbacks")]),t._v(" 里的回调，这样就执行了 "),n("code",[t._v("then")]),t._v(" 里的方法了")]),t._v(" "),n("li",[t._v("启后：上一步中，当 "),n("code",[t._v("then")]),t._v(" 里的方法执行完成后，返回一个结果，如果这个结果是个简单的值，就直接调用新 "),n("code",[t._v("promise")]),t._v(" 的 "),n("code",[t._v("resolve")]),t._v("，让其状态变更，这又会依次调用新 "),n("code",[t._v("promise")]),t._v(" 的 "),n("code",[t._v("callbacks")]),t._v(" 数组里的方法，循环往复。。如果返回的结果是个 "),n("code",[t._v("promise")]),t._v("，则需要等它完成之后再触发新 "),n("code",[t._v("promise")]),t._v(" 的 "),n("code",[t._v("resolve")]),t._v("，所以可以在其结果的 "),n("code",[t._v("then")]),t._v(" 里调用新 "),n("code",[t._v("promise")]),t._v(" 的 "),n("code",[t._v("resolve")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("then(onFulfilled, onReject){\n    // 保存前一个promise的this\n    const self = this; \n    return new MyPromise((resolve, reject) => {\n      // 封装前一个promise成功时执行的函数\n      let fulfilled = () => {\n        try{\n          const result = onFulfilled(self.value); // 承前\n          return result instanceof MyPromise? result.then(resolve, reject) : resolve(result); //启后\n        }catch(err){\n          reject(err)\n        }\n      }\n      // 封装前一个promise失败时执行的函数\n      let rejected = () => {\n        try{\n          const result = onReject(self.reason);\n          return result instanceof MyPromise? result.then(resolve, reject) : reject(result);\n        }catch(err){\n          reject(err)\n        }\n      }\n      switch(self.status){\n        case PENDING: \n          self.onFulfilledCallbacks.push(fulfilled);\n          self.onRejectedCallbacks.push(rejected);\n          break;\n        case FULFILLED:\n          fulfilled();\n          break;\n        case REJECT:\n          rejected();\n          break;\n      }\n    })\n   }\n")])])]),n("p",[n("strong",[t._v("注意：")])]),t._v(" "),n("ul",[n("li",[t._v("连续多个 "),n("code",[t._v("then")]),t._v(" 里的回调方法是同步注册的，但注册到了不同的 "),n("code",[t._v("callbacks")]),t._v(" 数组中，因为每次 "),n("code",[t._v("then")]),t._v(" 都返回新的 "),n("code",[t._v("promise")]),t._v(" 实例（参考上面的例子和图）")]),t._v(" "),n("li",[t._v("注册完成后开始执行构造函数中的异步事件，异步完成之后依次调用 "),n("code",[t._v("callbacks")]),t._v(" 数组中提前注册的回调")])]),t._v(" "),n("h3",{attrs:{id:"_6-手写-promise-all"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-手写-promise-all"}},[t._v("#")]),t._v(" 6. 手写 Promise.all")]),t._v(" "),n("p",[n("strong",[t._v("1) 核心思路")])]),t._v(" "),n("ol",[n("li",[t._v("接收一个 Promise 实例的数组或具有 Iterator 接口的对象作为参数")]),t._v(" "),n("li",[t._v("这个方法返回一个新的 promise 对象，")]),t._v(" "),n("li",[t._v('遍历传入的参数，用Promise.resolve()将参数"包一层"，使其变成一个promise对象')]),t._v(" "),n("li",[t._v("参数所有回调成功才是成功，返回值数组与参数顺序一致")]),t._v(" "),n("li",[t._v("参数数组其中一个失败，则触发失败状态，第一个触发失败的 Promise 错误信息作为 Promise.all 的错误信息。")])]),t._v(" "),n("p",[n("strong",[t._v("2）实现代码")])]),t._v(" "),n("p",[t._v("一般来说，Promise.all 用来处理多个并发请求，也是为了页面数据构造的方便，将一个页面所用到的在不同接口的数据一起请求过来，不过，如果其中一个接口失败了，多个请求也就失败了，页面可能啥也出不来，这就看当前页面的耦合程度了")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("promiseAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("promises")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("promises"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypeError")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("argument must be a array")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" resolvedCounter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promiseNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promises"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" resolvedResult "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" promiseNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Promise"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("promises"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        resolvedCounter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        resolvedResult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolvedCounter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" promiseNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolvedResult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("promiseAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [3, 1, 2]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_7-手写-promise-race"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-手写-promise-race"}},[t._v("#")]),t._v(" 7. 手写 Promise.race")]),t._v(" "),n("p",[t._v("该方法的参数是 Promise 实例数组, 然后其 then 注册的回调方法是数组中的某一个 Promise 的状态变为 fulfilled 的时候就执行. 因为 Promise 的状态"),n("strong",[t._v("只能改变一次")]),t._v(", 那么我们只需要把 Promise.race 中产生的 Promise 对象的 resolve 方法, 注入到数组中的每一个 Promise 实例中的回调函数中即可.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Promise.race = function (args) {\n  return new Promise((resolve, reject) => {\n    for (let i = 0, len = args.length; i < len; i++) {\n      args[i].then(resolve, reject)\n    }\n  })\n}\n")])])]),n("h3",{attrs:{id:"_8-手写防抖函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-手写防抖函数"}},[t._v("#")]),t._v(" 8. 手写防抖函数")]),t._v(" "),n("p",[t._v("函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 函数防抖的实现\nfunction debounce(fn, wait) {\n  let timer = null;\n\n  return function() {\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n")])])]),n("h3",{attrs:{id:"_9-手写节流函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-手写节流函数"}},[t._v("#")]),t._v(" 9. 手写节流函数")]),t._v(" "),n("p",[t._v("函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 函数节流的实现;\nfunction throttle(fn, delay) {\n  let curTime = Date.now();\n\n  return function() {\n    let context = this,\n        args = arguments,\n        nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - curTime >= delay) {\n      curTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n")])])]),n("h3",{attrs:{id:"_10-手写类型判断函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-手写类型判断函数"}},[t._v("#")]),t._v(" 10. 手写类型判断函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + "";\n  }\n  // 判断数据是引用类型的情况\n  if (typeof value === "object") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(" ")[1].split("");\n    type.pop();\n    return type.join("").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n')])])]),n("h3",{attrs:{id:"_11-手写-call-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-手写-call-函数"}},[t._v("#")]),t._v(" 11. 手写 call 函数")]),t._v(" "),n("p",[t._v("call 函数的实现步骤：")]),t._v(" "),n("ol",[n("li",[t._v("判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")]),t._v(" "),n("li",[t._v("判断传入上下文对象是否存在，如果不存在，则设置为 window 。")]),t._v(" "),n("li",[t._v("处理传入的参数，截取第一个参数后的所有参数。")]),t._v(" "),n("li",[t._v("将函数作为上下文对象的一个属性。")]),t._v(" "),n("li",[t._v("使用上下文对象来调用这个方法，并保存返回结果。")]),t._v(" "),n("li",[t._v("删除刚才新增的属性。")]),t._v(" "),n("li",[t._v("返回结果。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== "function") {\n    console.error("type error");\n  }\n  // 获取参数\n  let args = [...arguments].slice(1),\n      result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n')])])]),n("h3",{attrs:{id:"_12-手写-apply-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-手写-apply-函数"}},[t._v("#")]),t._v(" 12. 手写 apply 函数")]),t._v(" "),n("p",[t._v("apply 函数的实现步骤：")]),t._v(" "),n("ol",[n("li",[t._v("判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")]),t._v(" "),n("li",[t._v("判断传入上下文对象是否存在，如果不存在，则设置为 window 。")]),t._v(" "),n("li",[t._v("将函数作为上下文对象的一个属性。")]),t._v(" "),n("li",[t._v("判断参数值是否传入")]),t._v(" "),n("li",[t._v("使用上下文对象来调用这个方法，并保存返回结果。")]),t._v(" "),n("li",[t._v("删除刚才新增的属性")]),t._v(" "),n("li",[t._v("返回结果")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// apply 函数实现\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n')])])]),n("h3",{attrs:{id:"_13-手写-bind-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-手写-bind-函数"}},[t._v("#")]),t._v(" 13. 手写 bind 函数")]),t._v(" "),n("p",[t._v("bind 函数的实现步骤：")]),t._v(" "),n("ol",[n("li",[t._v("判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")]),t._v(" "),n("li",[t._v("保存当前函数的引用，获取其余传入参数值。")]),t._v(" "),n("li",[t._v("创建一个函数返回")]),t._v(" "),n("li",[t._v("函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n      fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n')])])]),n("h3",{attrs:{id:"_14-函数柯里化的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-函数柯里化的实现"}},[t._v("#")]),t._v(" 14. 函数柯里化的实现")]),t._v(" "),n("p",[t._v("函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n\n  args = args || [];\n\n  return function() {\n    let subArgs = args.slice(0);\n\n    // 拼接得到现有的所有参数\n    for (let i = 0; i < arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n\n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n\n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n")])])]),n("h3",{attrs:{id:"_15-实现ajax请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-实现ajax请求"}},[t._v("#")]),t._v(" 15. 实现AJAX请求")]),t._v(" "),n("p",[t._v("AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。")]),t._v(" "),n("p",[t._v("创建AJAX请求的步骤：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("创建一个 XMLHttpRequest 对象。")])]),t._v(" "),n("li",[t._v("在这个对象上"),n("strong",[t._v("使用 open 方法创建一个 HTTP 请求")]),t._v("，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。")]),t._v(" "),n("li",[t._v("在发起请求前，可以为这个对象"),n("strong",[t._v("添加一些信息和监听函数")]),t._v("。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。")]),t._v(" "),n("li",[t._v("当对象的属性和监听函数设置完成后，最后调"),n("strong",[t._v("用 send 方法来向服务器发起请求")]),t._v("，可以传入参数作为发送的数据体。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('const SERVER_URL = "/server";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open("GET", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = "json";\nxhr.setRequestHeader("Accept", "application/json");\n// 发送 Http 请求\nxhr.send(null);\n')])])]),n("h3",{attrs:{id:"_16-使用promise封装ajax请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-使用promise封装ajax请求"}},[t._v("#")]),t._v(" 16. 使用Promise封装AJAX请求")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// promise 封装实现：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getJSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个 promise 对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" promise "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新建一个 http 请求")]),t._v("\n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置状态的监听函数")]),t._v("\n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当请求成功或失败时，改变 promise 的状态")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusText"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置错误监听函数")]),t._v("\n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusText"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置响应的数据类型")]),t._v("\n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"json"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置请求头信息")]),t._v("\n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Accept"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application/json"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送 http 请求")]),t._v("\n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" promise"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_17-实现浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-实现浅拷贝"}},[t._v("#")]),t._v(" 17. 实现浅拷贝")]),t._v(" "),n("p",[t._v("浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。")]),t._v(" "),n("h4",{attrs:{id:"_1-object-assign"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-object-assign"}},[t._v("#")]),t._v(" （1）Object.assign()")]),t._v(" "),n("p",[n("code",[t._v("Object.assign()")]),t._v("是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法："),n("code",[t._v("Object.assign(target, source_1, ···)")]),t._v("，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")])]),t._v(" "),n("ul",[n("li",[t._v("如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。")]),t._v(" "),n("li",[t._v("如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。")]),t._v(" "),n("li",[t._v("因为"),n("code",[t._v("null")]),t._v(" 和 "),n("code",[t._v("undefined")]),t._v(" 不能转化为对象，所以第一个参数不能为"),n("code",[t._v("null")]),t._v("或 "),n("code",[t._v("undefined")]),t._v("，会报错。")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" object2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" object3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("object2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("object3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {a: 1, b: 2, c: 3}")]),t._v("\n")])])]),n("h4",{attrs:{id:"_2-扩展运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-扩展运算符"}},[t._v("#")]),t._v(" （2）扩展运算符")]),t._v(" "),n("p",[t._v("使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法："),n("code",[t._v("let cloneObj = { ...obj };")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{a:2,b:{c:1}}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{a:1,b:{c:1}}")]),t._v("\nobj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{a:2,b:{c:2}}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{a:1,b:{c:2}}")]),t._v("\n")])])]),n("h4",{attrs:{id:"_3-数组方法实现数组浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组方法实现数组浅拷贝"}},[t._v("#")]),t._v(" （3）数组方法实现数组浅拷贝")]),t._v(" "),n("h6",{attrs:{id:"_1-array-prototype-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-array-prototype-slice"}},[t._v("#")]),t._v(" "),n("strong",[t._v("1）Array.prototype.slice")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("slice()")]),t._v("方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法："),n("code",[t._v("array.slice(start, end)")]),t._v("，该方法不会改变原始数组。")]),t._v(" "),n("li",[t._v("该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2,3,4]")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),n("h6",{attrs:{id:"_2-array-prototype-concat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-array-prototype-concat"}},[t._v("#")]),t._v(" "),n("strong",[t._v("2）Array.prototype.concat")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("concat()")]),t._v(" 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。")]),t._v(" "),n("li",[t._v("该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2,3,4]")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),n("h4",{attrs:{id:"_4-手写实现浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-手写实现浅拷贝"}},[t._v("#")]),t._v(" （4）手写实现浅拷贝")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浅拷贝的实现;")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shallowCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只拷贝对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据 object 的类型判断是新建一个数组还是对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历 object，并且判断是 object 的属性才拷贝")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浅拷贝的实现;")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shallowCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只拷贝对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据 object 的类型判断是新建一个数组还是对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历 object，并且判断是 object 的属性才拷贝")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浅拷贝的实现;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shallowCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只拷贝对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据 object 的类型判断是新建一个数组还是对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历 object，并且判断是 object 的属性才拷贝")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_18-实现深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-实现深拷贝"}},[t._v("#")]),t._v(" 18. 实现深拷贝")]),t._v(" "),n("ul",[n("li",[t._v("**浅拷贝：**浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。")]),t._v(" "),n("li",[t._v("**深拷贝：**深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败")])]),t._v(" "),n("h4",{attrs:{id:"_1-json-stringify"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-json-stringify"}},[t._v("#")]),t._v(" （1）JSON.stringify()")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("JSON.parse(JSON.stringify(obj))")]),t._v("是目前比较常用的深拷贝方法之一，它的原理就是利用"),n("code",[t._v("JSON.stringify")]),t._v(" 将"),n("code",[t._v("js")]),t._v("对象序列化（JSON字符串），再使用"),n("code",[t._v("JSON.parse")]),t._v("来反序列化(还原)"),n("code",[t._v("js")]),t._v("对象。")]),t._v(" "),n("li",[t._v("这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过"),n("code",[t._v("JSON.stringify()")]),t._v("进行处理之后，都会消失。")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                 "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n                 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {a: 1, b: {c: 1}}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {a: 0, b: {c: 0}}")]),t._v("\n")])])]),n("h4",{attrs:{id:"_2-函数库lodash的-clonedeep方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数库lodash的-clonedeep方法"}},[t._v("#")]),t._v(" （2）函数库lodash的_.cloneDeep方法")]),t._v(" "),n("p",[t._v("该函数库也有提供_.cloneDeep用来做 Deep Copy")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" _ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lodash'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("g")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cloneDeep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),n("h4",{attrs:{id:"_3-手写实现深拷贝函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-手写实现深拷贝函数"}},[t._v("#")]),t._v(" （3）手写实现深拷贝函数")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 深拷贝的实现")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" object "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"二、数据处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、数据处理"}},[t._v("#")]),t._v(" 二、数据处理")]),t._v(" "),n("h3",{attrs:{id:"_1-实现日期格式化函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现日期格式化函数"}},[t._v("#")]),t._v(" 1. 实现日期格式化函数")]),t._v(" "),n("p",[t._v("输入：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("dateFormat(new Date('2020-12-01'), 'yyyy/MM/dd') // 2020/12/01\ndateFormat(new Date('2020-04-01'), 'yyyy/MM/dd') // 2020/04/01\ndateFormat(new Date('2020-04-01'), 'yyyy年MM月dd日') // 2020年04月01日\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const dateFormat = (dateInput, format)=>{\n    var day = dateInput.getDate() \n    var month = dateInput.getMonth() + 1  \n    var year = dateInput.getFullYear()   \n    format = format.replace(/yyyy/, year)\n    format = format.replace(/MM/,month)\n    format = format.replace(/dd/,day)\n    return format\n}\n")])])]),n("h3",{attrs:{id:"_2-交换a-b的值-不能用临时变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-交换a-b的值-不能用临时变量"}},[t._v("#")]),t._v(" 2. 交换a,b的值，不能用临时变量")]),t._v(" "),n("p",[t._v("巧妙的利用两个数的和、差：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("a = a + b\nb = a - b\na = a - b\n")])])]),n("h3",{attrs:{id:"_3-实现数组的乱序输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现数组的乱序输出"}},[t._v("#")]),t._v(" 3. 实现数组的乱序输出")]),t._v(" "),n("p",[t._v("主要的实现思路就是：")]),t._v(" "),n("ul",[n("li",[t._v("取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。")]),t._v(" "),n("li",[t._v("第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换")]),t._v(" "),n("li",[t._v("按照上面的规律执行，直到遍历完成")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var arr = [1,2,3,4,5,6,7,8,9,10];\nfor (var i = 0; i < arr.length; i++) {\n  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n}\nconsole.log(arr)\n")])])]),n("p",[t._v("还有一方法就是倒序遍历：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var arr = [1,2,3,4,5,6,7,8,9,10];\nlet length = arr.length,\n    randomIndex,\n    temp;\n  while (length) {\n    randomIndex = Math.floor(Math.random() * length--);\n    temp = arr[length];\n    arr[length] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\nconsole.log(arr)\n")])])]),n("h3",{attrs:{id:"_4-实现数组元素求和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现数组元素求和"}},[t._v("#")]),t._v(" 4. 实现数组元素求和")]),t._v(" "),n("ul",[n("li",[t._v("arr=[1,2,3,4,5,6,7,8,9,10]，求和")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr=[1,2,3,4,5,6,7,8,9,10]\nlet sum = arr.reduce( (total,i) => total += i,0);\nconsole.log(sum);\n")])])]),n("ul",[n("li",[t._v("arr=[1,2,3,[[4,5],6],7,8,9]，求和")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var = arr=[1,2,3,[[4,5],6],7,8,9]\nlet arr= arr.toString().split(',').reduce( (total,i) => total += Number(i),0);\nconsole.log(arr);\n")])])]),n("p",[t._v("递归实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, 2, 3, 4, 5, 6] \n\nfunction add(arr) {\n    if (arr.length == 1) return arr[0] \n    return arr[0] + add(arr.slice(1)) \n}\nconsole.log(add(arr)) // 21\n")])])]),n("h3",{attrs:{id:"_5-实现数组的扁平化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现数组的扁平化"}},[t._v("#")]),t._v(" 5. 实现数组的扁平化")]),t._v(" "),n("p",[n("strong",[t._v("（1）递归实现")])]),t._v(" "),n("p",[t._v("普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) {\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++) {\n    if(Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nflatten(arr);  //  [1, 2, 3, 4，5]\n")])])]),n("p",[n("strong",[t._v("（2）reduce 函数迭代")])]),t._v(" "),n("p",[t._v("从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.reduce(function(prev, next){\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    }, [])\n}\nconsole.log(flatten(arr));//  [1, 2, 3, 4，5]\n")])])]),n("p",[n("strong",[t._v("（3）扩展运算符实现")])]),t._v(" "),n("p",[t._v("这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])])]),n("p",[n("strong",[t._v("（4）split 和 toString")])]),t._v(" "),n("p",[t._v("可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.toString().split(',');\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])])]),n("p",[t._v("通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。")]),t._v(" "),n("p",[t._v("**（5）**"),n("strong",[t._v("ES6 中的 flat")])]),t._v(" "),n("p",[t._v("我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法："),n("code",[t._v("arr.flat([depth])")])]),t._v(" "),n("p",[t._v("其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  return arr.flat(Infinity);\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])])]),n("p",[t._v("可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。")]),t._v(" "),n("p",[n("strong",[t._v("（6）正则和 JSON 方法")])]),t._v(" "),n("p",[t._v("在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1, [2, [3, [4, 5]]], 6];\nfunction flatten(arr) {\n  let str = JSON.stringify(arr);\n  str = str.replace(/(\\[|\\])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str); \n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])])]),n("h3",{attrs:{id:"_6-实现数组去重"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-实现数组去重"}},[t._v("#")]),t._v(" 6. 实现数组去重")]),t._v(" "),n("p",[t._v("给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。")]),t._v(" "),n("p",[t._v("ES6方法（使用数据结构集合）：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nArray.from(new Set(array)); // [1, 2, 3, 5, 9, 8]\n")])])]),n("p",[t._v("ES5方法：使用map存储不重复的数字")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nuniqueArray(array); // [1, 2, 3, 5, 9, 8]\n\nfunction uniqueArray(array) {\n  let map = {};\n  let res = [];\n  for(var i = 0; i < array.length; i++) {\n    if(!map.hasOwnProperty([array[i]])) {\n      map[array[i]] = 1;\n      res.push(array[i]);\n    }\n  }\n  return res;\n}\n")])])]),n("h3",{attrs:{id:"_7-实现数组的flat方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-实现数组的flat方法"}},[t._v("#")]),t._v(" 7. 实现数组的flat方法")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_flat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" depth")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" depth "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cur")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_flat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" depth "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_8-实现数组的push方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-实现数组的push方法"}},[t._v("#")]),t._v(" 8. 实现数组的push方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [];\nArray.prototype.push = function() {\n    for( let i = 0 ; i < arguments.length ; i++){\n        this[this.length] = arguments[i] ;\n    }\n    return this.length;\n}\n")])])]),n("h3",{attrs:{id:"_9-实现数组的filter方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-实现数组的filter方法"}},[t._v("#")]),t._v(" 9. 实现数组的filter方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Array.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n")])])]),n("h3",{attrs:{id:"_10-实现数组的map方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-实现数组的map方法"}},[t._v("#")]),t._v(" 10. 实现数组的map方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Array.prototype._map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n")])])]),n("h3",{attrs:{id:"_11-实现字符串的repeat方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-实现字符串的repeat方法"}},[t._v("#")]),t._v(" 11. 实现字符串的repeat方法")]),t._v(" "),n("p",[t._v("输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function repeat(s, n) {\n    return (new Array(n + 1)).join(s);\n}\n")])])]),n("p",[t._v("递归：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function repeat(s, n) {\n    return (n > 0) ? s.concat(repeat(s, --n)) : "";\n}\n')])])]),n("h3",{attrs:{id:"_12-实现字符串翻转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-实现字符串翻转"}},[t._v("#")]),t._v(" 12. 实现字符串翻转")]),t._v(" "),n("p",[t._v("在字符串的原型链上添加一个方法，实现字符串翻转：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('String.prototype._reverse = function(a){\n    return a.split("").reverse().join("");\n}\nvar obj = new String();\nvar res = obj._reverse (\'hello\');\nconsole.log(res);    // olleh\n')])])]),n("p",[t._v("需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。")]),t._v(" "),n("h3",{attrs:{id:"_13-将数字每千分位用逗号隔开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-将数字每千分位用逗号隔开"}},[t._v("#")]),t._v(" 13. 将数字每千分位用逗号隔开")]),t._v(" "),n("p",[n("strong",[t._v("数字有小数版本：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let format = n => {\n    let num = n.toString() // 转成字符串\n    let decimals = ''\n        // 判断是否有小数\n    num.indexOf('.') > -1 ? decimals = num.split('.')[1] : decimals\n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let temp = ''\n        let remainder = len % 3\n        decimals ? temp = '.' + decimals : temp\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') + temp\n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') + temp \n        }\n    }\n}\nformat(12323.33)  // '12,323.33'\n")])])]),n("p",[n("strong",[t._v("数字无小数版本：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let format = n => {\n    let num = n.toString() \n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let remainder = len % 3\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') \n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') \n        }\n    }\n}\nformat(1232323)  // '1,232,323'\n")])])]),n("h3",{attrs:{id:"_14-实现非负大整数相加"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-实现非负大整数相加"}},[t._v("#")]),t._v(" 14. 实现非负大整数相加")]),t._v(" "),n("p",[t._v("JavaScript对数值有范围的限制，限制如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Number.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n")])])]),n("p",[t._v("如果想要对一个超大的整数("),n("code",[t._v("> Number.MAX_SAFE_INTEGER")]),t._v(")进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 "),n("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v(" 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。")]),t._v(" "),n("p",[t._v("实现一个算法进行大数的相加：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function sumBigNumber(a, b) {\n  let res = '';\n  let temp = 0;\n  \n  a = a.split('');\n  b = b.split('');\n  \n  while (a.length || b.length || temp) {\n    temp += ~~a.pop() + ~~b.pop();\n    res = (temp % 10) + res;\n    temp  = temp > 9\n  }\n  return res.replace(/^0+/, '');\n}\n")])])]),n("p",[t._v("其主要的思路如下：")]),t._v(" "),n("ul",[n("li",[t._v("首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化")]),t._v(" "),n("li",[t._v("初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算")]),t._v(" "),n("li",[t._v("将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要进位，对10进行取余操作，将结果保存在当前位")]),t._v(" "),n("li",[t._v("判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加")]),t._v(" "),n("li",[t._v("重复上述操作，直至计算结束")])]),t._v(" "),n("h3",{attrs:{id:"_13-实现-add-1-2-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-实现-add-1-2-3"}},[t._v("#")]),t._v(" 13. 实现 add(1)(2)(3)")]),t._v(" "),n("p",[t._v("函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。")]),t._v(" "),n("p",[t._v("1）粗暴版")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function add (a) {\nreturn function (b) {\n    return function (c) {\n      return a + b + c;\n    }\n}\n}\nconsole.log(add(1)(2)(3)); // 6\n")])])]),n("p",[t._v("2）柯里化解决方案")]),t._v(" "),n("ul",[n("li",[t._v("参数长度固定")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var add = function (m) {\n  var temp = function (n) {\n    return add(m + n);\n  }\n  temp.toString = function () {\n    return m;\n  }\n  return temp;\n};\nconsole.log(add(3)(4)(5)); // 12\nconsole.log(add(3)(6)(9)(25)); // 43\n")])])]),n("p",[t._v("对于add(3)(4)(5)，其执行过程如下：")]),t._v(" "),n("ol",[n("li",[t._v("先执行add(3)，此时m=3，并且返回temp函数；")]),t._v(" "),n("li",[t._v("执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数")]),t._v(" "),n("li",[t._v("执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数")]),t._v(" "),n("li",[t._v("由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。")])]),t._v(" "),n("ul",[n("li",[t._v("参数长度不固定")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function add (...args) {\n    //求和\n    return args.reduce((a, b) => a + b)\n}\nfunction currying (fn) {\n    let args = []\n    return function temp (...newArgs) {\n        if (newArgs.length) {\n            args = [\n                ...args,\n                ...newArgs\n            ]\n            return temp\n        } else {\n            let val = fn.apply(this, args)\n            args = [] //保证再次调用时清空\n            return val\n        }\n    }\n}\nlet addCurry = currying(add)\nconsole.log(addCurry(1)(2)(3)(4, 5)())  //15\nconsole.log(addCurry(1)(2)(3, 4, 5)())  //15\nconsole.log(addCurry(1)(2, 3, 4, 5)())  //15\n")])])]),n("h3",{attrs:{id:"_14-实现类数组转化为数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-实现类数组转化为数组"}},[t._v("#")]),t._v(" 14. 实现类数组转化为数组")]),t._v(" "),n("p",[t._v("类数组转换为数组的方法有这样几种：")]),t._v(" "),n("ul",[n("li",[t._v("通过 call 调用数组的 slice 方法来实现转换")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Array.prototype.slice.call(arrayLike);\n")])])]),n("ul",[n("li",[t._v("通过 call 调用数组的 splice 方法来实现转换")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Array.prototype.splice.call(arrayLike, 0);\n")])])]),n("ul",[n("li",[t._v("通过 apply 调用数组的 concat 方法来实现转换")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Array.prototype.concat.apply([], arrayLike);\n")])])]),n("ul",[n("li",[t._v("通过 Array.from 方法来实现转换")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Array.from(arrayLike);\n")])])]),n("h3",{attrs:{id:"_15-使用-reduce-求和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-使用-reduce-求和"}},[t._v("#")]),t._v(" 15. 使用 reduce 求和")]),t._v(" "),n("p",[t._v("arr = [1,2,3,4,5,6,7,8,9,10]，求和")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1,2,3,4,5,6,7,8,9,10]\narr.reduce((prev, cur) => { return prev + cur }, 0)\n")])])]),n("p",[t._v("arr = [1,2,3,[[4,5],6],7,8,9]，求和")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let arr = [1,2,3,4,5,6,7,8,9,10]\narr.flat(Infinity).reduce((prev, cur) => { return prev + cur }, 0)\n")])])]),n("p",[t._v("arr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('let arr = [{a:9, b:3, c:4}, {a:1, b:3}, {a:3}] \n\narr.reduce((prev, cur) => {\n    return prev + cur["a"];\n}, 0)\n')])])]),n("h3",{attrs:{id:"_16-将js对象转化为树形结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-将js对象转化为树形结构"}},[t._v("#")]),t._v(" 16. 将js对象转化为树形结构")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 转换前：\nsource = [{\n            id: 1,\n            pid: 0,\n            name: 'body'\n          }, {\n            id: 2,\n            pid: 1,\n            name: 'title'\n          }, {\n            id: 3,\n            pid: 2,\n            name: 'div'\n          }]\n// 转换为: \ntree = [{\n          id: 1,\n          pid: 0,\n          name: 'body',\n          children: [{\n            id: 2,\n            pid: 1,\n            name: 'title',\n            children: [{\n              id: 3,\n              pid: 1,\n              name: 'div'\n            }]\n          }\n        }]\n")])])]),n("p",[t._v("代码实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function jsonToTree(data) {\n  // 初始化结果数组，并判断输入数据的格式\n  let result = []\n  if(!Array.isArray(data)) {\n    return result\n  }\n  // 使用map，将当前对象的id与当前对象对应存储起来\n  let map = {};\n  data.forEach(item => {\n    map[item.id] = item;\n  });\n  // \n  data.forEach(item => {\n    let parent = map[item.pid];\n    if(parent) {\n      (parent.children || (parent.children = [])).push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n")])])]),n("h3",{attrs:{id:"_17-使用es5和es6求函数参数的和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-使用es5和es6求函数参数的和"}},[t._v("#")]),t._v(" 17. 使用ES5和ES6求函数参数的和")]),t._v(" "),n("p",[t._v("ES5：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function sum() {\n    let sum = 0\n    Array.prototype.forEach.call(arguments, function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n")])])]),n("p",[t._v("ES6：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function sum(...nums) {\n    let sum = 0\n    nums.forEach(function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n")])])]),n("h3",{attrs:{id:"_18-解析-url-params-为对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-解析-url-params-为对象"}},[t._v("#")]),t._v(" 18. 解析 URL Params 为对象")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled';\nparseParam(url)\n/* 结果\n{ user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n}\n*/\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function parseParam(url) {\n  const paramsStr = /.+\\?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&'); // 将字符串以 & 分割后存到数组中\n  let paramsObj = {};\n  // 将 params 存到对象中\n  paramsArr.forEach(param => {\n    if (/=/.test(param)) { // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^\\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n      if (paramsObj.hasOwnProperty(key)) { // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      } else { // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      }\n    } else { // 处理没有 value 的参数\n      paramsObj[param] = true;\n    }\n  })\n  return paramsObj;\n}\n")])])]),n("h2",{attrs:{id:"三、场景应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、场景应用"}},[t._v("#")]),t._v(" 三、场景应用")]),t._v(" "),n("h3",{attrs:{id:"_1-循环打印红黄绿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-循环打印红黄绿"}},[t._v("#")]),t._v(" 1. 循环打印红黄绿")]),t._v(" "),n("p",[t._v("下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法："),n("strong",[t._v("红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？")])]),t._v(" "),n("p",[t._v("三个亮灯函数：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}\n")])])]),n("p",[t._v("这道题复杂的地方在于"),n("strong",[t._v("需要“交替重复”亮灯")]),t._v("，而不是“亮完一次”就结束了。")]),t._v(" "),n("h4",{attrs:{id:"_1-用-callback-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用-callback-实现"}},[t._v("#")]),t._v(" （1）用 callback 实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const task = (timer, light, callback) => {\n    setTimeout(() => {\n        if (light === 'red') {\n            red()\n        }\n        else if (light === 'green') {\n            green()\n        }\n        else if (light === 'yellow') {\n            yellow()\n        }\n        callback()\n    }, timer)\n}\ntask(3000, 'red', () => {\n    task(2000, 'green', () => {\n        task(1000, 'yellow', Function.prototype)\n    })\n})\n")])])]),n("p",[t._v("这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？")]),t._v(" "),n("p",[t._v("上面提到过递归，可以递归亮灯的一个周期：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const step = () => {\n    task(3000, 'red', () => {\n        task(2000, 'green', () => {\n            task(1000, 'yellow', step)\n        })\n    })\n}\nstep()\n")])])]),n("p",[n("strong",[t._v("注意看黄灯亮的回调里又再次调用了 step 方法")]),t._v(" 以完成循环亮灯。")]),t._v(" "),n("h4",{attrs:{id:"_2-用-promise-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-用-promise-实现"}},[t._v("#")]),t._v(" （2）用 promise 实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const task = (timer, light) => \n    new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (light === 'red') {\n                red()\n            }\n            else if (light === 'green') {\n                green()\n            }\n            else if (light === 'yellow') {\n                yellow()\n            }\n            resolve()\n        }, timer)\n    })\nconst step = () => {\n    task(3000, 'red')\n        .then(() => task(2000, 'green'))\n        .then(() => task(1000, 'yellow'))\n        .then(step)\n}\nstep()\n")])])]),n("p",[t._v("这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。")]),t._v(" "),n("h4",{attrs:{id:"_3-用-async-await-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-用-async-await-实现"}},[t._v("#")]),t._v(" （3）用 async/await 实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const taskRunner =  async () => {\n    await task(3000, 'red')\n    await task(2000, 'green')\n    await task(1000, 'yellow')\n    taskRunner()\n}\ntaskRunner()\n")])])]),n("h3",{attrs:{id:"_2-实现每隔一秒打印-1-2-3-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现每隔一秒打印-1-2-3-4"}},[t._v("#")]),t._v(" 2. 实现每隔一秒打印 1,2,3,4")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 使用闭包实现\nfor (var i = 0; i < 5; i++) {\n  (function(i) {\n    setTimeout(function() {\n      console.log(i);\n    }, i * 1000);\n  })(i);\n}\n// 使用 let 块级作用域\nfor (let i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}\n")])])]),n("h3",{attrs:{id:"_3-小孩报数问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-小孩报数问题"}},[t._v("#")]),t._v(" 3. 小孩报数问题")]),t._v(" "),n("p",[t._v("有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function childNum(num, count){\n    let allplayer = [];    \n    for(let i = 0; i < num; i++){\n        allplayer[i] = i + 1;\n    }\n    \n    let exitCount = 0;    // 离开人数\n    let counter = 0;      // 记录报数\n    let curIndex = 0;     // 当前下标\n    \n    while(exitCount < num - 1){\n        if(allplayer[curIndex] !== 0) counter++;    \n        \n        if(counter == count){\n            allplayer[curIndex] = 0;                 \n            counter = 0;\n            exitCount++;  \n        }\n        curIndex++;\n        if(curIndex == num){\n            curIndex = 0               \n        };           \n    }    \n    for(i = 0; i < num; i++){\n        if(allplayer[i] !== 0){\n            return allplayer[i]\n        }      \n    }\n}\nchildNum(30, 3)\n")])])]),n("h3",{attrs:{id:"_4-用promise实现图片的异步加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-用promise实现图片的异步加载"}},[t._v("#")]),t._v(" 4. 用Promise实现图片的异步加载")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('let imageAsync=(url)=>{\n            return new Promise((resolve,reject)=>{\n                let img = new Image();\n                img.src = url;\n                img.οnlοad=()=>{\n                    console.log(`图片请求成功，此处进行通用操作`);\n                    resolve(image);\n                }\n                img.οnerrοr=(err)=>{\n                    console.log(`失败，此处进行失败的通用操作`);\n                    reject(err);\n                }\n            })\n        }\n        \nimageAsync("url").then(()=>{\n    console.log("加载成功");\n}).catch((error)=>{\n    console.log("加载失败");\n})\n')])])]),n("h3",{attrs:{id:"_5-实现发布-订阅模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现发布-订阅模式"}},[t._v("#")]),t._v(" 5. 实现发布-订阅模式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class EventCenter{\n  // 1. 定义事件容器，用来装事件数组\n    let handlers = {}\n\n  // 2. 添加事件方法，参数：事件名 事件方法\n  addEventListener(type, handler) {\n    // 创建新数组容器\n    if (!this.handlers[type]) {\n      this.handlers[type] = []\n    }\n    // 存入事件\n    this.handlers[type].push(handler)\n  }\n\n  // 3. 触发事件，参数：事件名 事件参数\n  dispatchEvent(type, params) {\n    // 若没有注册该事件则抛出错误\n    if (!this.handlers[type]) {\n      return new Error('该事件未注册')\n    }\n    // 触发事件\n    this.handlers[type].forEach(handler => {\n      handler(...params)\n    })\n  }\n\n  // 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布\n  removeEventListener(type, handler) {\n    if (!this.handlers[type]) {\n      return new Error('事件无效')\n    }\n    if (!handler) {\n      // 移除事件\n      delete this.handlers[type]\n    } else {\n      const index = this.handlers[type].findIndex(el => el === handler)\n      if (index === -1) {\n        return new Error('无该绑定事件')\n      }\n      // 移除事件\n      this.handlers[type].splice(index, 1)\n      if (this.handlers[type].length === 0) {\n        delete this.handlers[type]\n      }\n    }\n  }\n}\n")])])]),n("h3",{attrs:{id:"_6-查找文章中出现频率最高的单词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-查找文章中出现频率最高的单词"}},[t._v("#")]),t._v(" 6. 查找文章中出现频率最高的单词")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function findMostWord(article) {\n  // 合法性判断\n  if (!article) return;\n  // 参数处理\n  article = article.trim().toLowerCase();\n  let wordList = article.match(/[a-z]+/g),\n    visited = [],\n    maxNum = 0,\n    maxWord = "";\n  article = " " + wordList.join("  ") + " ";\n  // 遍历判断单词出现次数\n  wordList.forEach(function(item) {\n    if (visited.indexOf(item) < 0) {\n      // 加入 visited \n      visited.push(item);\n      let word = new RegExp(" " + item + " ", "g"),\n        num = article.match(word).length;\n      if (num > maxNum) {\n        maxNum = num;\n        maxWord = item;\n      }\n    }\n  });\n  return maxWord + "  " + maxNum;\n}\n')])])]),n("h3",{attrs:{id:"_7-封装异步的fetch-使用async-await方式来使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-封装异步的fetch-使用async-await方式来使用"}},[t._v("#")]),t._v(" 7. 封装异步的fetch，使用async await方式来使用")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("(async () => {\n    class HttpRequestUtil {\n        async get(url) {\n            const res = await fetch(url);\n            const data = await res.json();\n            return data;\n        }\n        async post(url, data) {\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async put(url, data) {\n            const res = await fetch(url, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async delete(url, data) {\n            const res = await fetch(url, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n    }\n    const httpRequestUtil = new HttpRequestUtil();\n    const res = await httpRequestUtil.get('http://golderbrother.cn/');\n    console.log(res);\n})();\n")])])]),n("h3",{attrs:{id:"_8-实现prototype继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-实现prototype继承"}},[t._v("#")]),t._v(" 8. 实现prototype继承")]),t._v(" "),n("p",[t._v("所谓的原型链继承就是让新实例的原型等于父类的实例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//父方法\nfunction SupperFunction(flag1){\n    this.flag1 = flag1;\n}\n\n//子方法\nfunction SubFunction(flag2){\n    this.flag2 = flag2;\n}\n\n//父实例\nvar superInstance = new SupperFunction(true);\n\n//子继承父\nSubFunction.prototype = superInstance;\n\n//子实例\nvar subInstance = new SubFunction(false);\n//子调用自己和父的属性\nsubInstance.flag1;   // true\nsubInstance.flag2;   // false\n")])])]),n("h3",{attrs:{id:"_9-实现双向数据绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-实现双向数据绑定"}},[t._v("#")]),t._v(" 9. 实现双向数据绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let obj = {}\nlet input = document.getElementById('input')\nlet span = document.getElementById('span')\n// 数据劫持\nObject.defineProperty(obj, 'text', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    console.log('获取数据了')\n  },\n  set(newVal) {\n    console.log('数据更新了')\n    input.value = newVal\n    span.innerHTML = newVal\n  }\n})\n// 输入监听\ninput.addEventListener('keyup', function(e) {\n  obj.text = e.target.value\n})\n")])])]),n("h3",{attrs:{id:"_10-实现简单路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-实现简单路由"}},[t._v("#")]),t._v(" 10. 实现简单路由")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// hash路由\nclass Route{\n  constructor(){\n    // 路由存储对象\n    this.routes = {}\n    // 当前hash\n    this.currentHash = ''\n    // 绑定this，避免监听时this指向改变\n    this.freshRoute = this.freshRoute.bind(this)\n    // 监听\n    window.addEventListener('load', this.freshRoute, false)\n    window.addEventListener('hashchange', this.freshRoute, false)\n  }\n  // 存储\n  storeRoute (path, cb) {\n    this.routes[path] = cb || function () {}\n  }\n  // 更新\n  freshRoute () {\n    this.currentHash = location.hash.slice(1) || '/'\n    this.routes[this.currentHash]()\n  }\n}\n")])])]),n("h3",{attrs:{id:"_11-实现斐波那契数列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-实现斐波那契数列"}},[t._v("#")]),t._v(" 11. 实现斐波那契数列")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 递归\nfunction fn (n){\n    if(n==0) return 0\n    if(n==1) return 1\n    return fn(n-2)+fn(n-1)\n}\n// 优化\nfunction fibonacci2(n) {\n    const arr = [1, 1, 2];\n    const arrLen = arr.length;\n\n    if (n <= arrLen) {\n        return arr[n];\n    }\n\n    for (let i = arrLen; i < n; i++) {\n        arr.push(arr[i - 1] + arr[ i - 2]);\n    }\n\n    return arr[arr.length - 1];\n}\n// 非递归\nfunction fn(n) {\n    let pre1 = 1;\n    let pre2 = 1;\n    let current = 2;\n\n    if (n <= 2) {\n        return current;\n    }\n\n    for (let i = 2; i < n; i++) {\n        pre1 = pre2;\n        pre2 = current;\n        current = pre1 + pre2;\n    }\n\n    return current;\n}\n")])])]),n("h3",{attrs:{id:"_12-字符串出现的不重复最长长度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-字符串出现的不重复最长长度"}},[t._v("#")]),t._v(" 12. 字符串出现的不重复最长长度")]),t._v(" "),n("p",[t._v("用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var lengthOfLongestSubstring = function (s) {\n    let map = new Map();\n    let i = -1\n    let res = 0\n    let n = s.length\n    for (let j = 0; j < n; j++) {\n        if (map.has(s[j])) {\n            i = Math.max(i, map.get(s[j]))\n        }\n        res = Math.max(res, j - i)\n        map.set(s[j], j)\n    }\n    return res\n};\n")])])]),n("h3",{attrs:{id:"_13-使用-settimeout-实现-setinterval"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-使用-settimeout-实现-setinterval"}},[t._v("#")]),t._v(" 13. 使用 setTimeout 实现 setInterval")]),t._v(" "),n("p",[t._v("setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。")]),t._v(" "),n("p",[t._v("针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。")]),t._v(" "),n("p",[t._v("实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n  // 启动定时器\n  setTimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n}\n")])])]),n("h3",{attrs:{id:"_14-实现-jsonp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-实现-jsonp"}},[t._v("#")]),t._v(" 14. 实现 jsonp")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 动态的加载js文件\nfunction addScript(src) {\n  const script = document.createElement(\'script\');\n  script.src = src;\n  script.type = "text/javascript";\n  document.body.appendChild(script);\n}\naddScript("http://xxx.xxx.com/xxx.js?callback=handleRes");\n// 设置一个全局的callback函数来接收回调结果\nfunction handleRes(res) {\n  console.log(res);\n}\n// 接口返回的数据格式\nhandleRes({a: 1, b: 2});\n')])])]),n("h3",{attrs:{id:"_15-判断对象是否存在循环引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-判断对象是否存在循环引用"}},[t._v("#")]),t._v(" 15. 判断对象是否存在循环引用")]),t._v(" "),n("p",[t._v("循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用"),n("code",[t._v("JSON.stringify()")]),t._v("对该类对象进行序列化，就会报错: "),n("code",[t._v("Converting circular structure to JSON.")])]),t._v(" "),n("p",[t._v("下面方法可以用来判断一个对象中是否已存在循环引用：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const isCycleObject = (obj,parent) => {\n    const parentArr = parent || [obj];\n    for(let i in obj) {\n        if(typeof obj[i] === 'object') {\n            let flag = false;\n            parentArr.forEach((pObj) => {\n                if(pObj === obj[i]){\n                    flag = true;\n                }\n            })\n            if(flag) return true;\n            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);\n            if(flag) return true;\n        }\n    }\n    return false;\n}\n\n\nconst a = 1;\nconst b = {a};\nconst c = {b};\nconst o = {d:{a:3},c}\no.c.b.aa = a;\n\nconsole.log(isCycleObject(o)\n")])])]),n("p",[t._v("查找有序二维数组的目标值：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var findNumberIn2DArray = function(matrix, target) {\n    if (matrix == null || matrix.length == 0) {\n        return false;\n    }\n    let row = 0;\n    let column = matrix[0].length - 1;\n    while (row < matrix.length && column >= 0) {\n        if (matrix[row][column] == target) {\n            return true;\n        } else if (matrix[row][column] > target) {\n            column--;\n        } else {\n            row++;\n        }\n    }\n    return false;\n};\n")])])]),n("p",[t._v("二维数组斜向打印：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function printMatrix(arr){\n  let m = arr.length, n = arr[0].length\n    let res = []\n  \n  // 左上角，从0 到 n - 1 列进行打印\n  for (let k = 0; k < n; k++) {\n    for (let i = 0, j = k; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n\n  // 右下角，从1 到 n - 1 行进行打印\n  for (let k = 1; k < m; k++) {\n    for (let i = k, j = n - 1; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n  return res\n}\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);